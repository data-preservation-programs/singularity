// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// CreateWebdavStorageReader is a Reader for the CreateWebdavStorage structure.
type CreateWebdavStorageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateWebdavStorageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateWebdavStorageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateWebdavStorageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateWebdavStorageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /storage/webdav] CreateWebdavStorage", response, response.Code())
	}
}

// NewCreateWebdavStorageOK creates a CreateWebdavStorageOK with default headers values
func NewCreateWebdavStorageOK() *CreateWebdavStorageOK {
	return &CreateWebdavStorageOK{}
}

/*
CreateWebdavStorageOK describes a response with status code 200, with default header values.

OK
*/
type CreateWebdavStorageOK struct {
	Payload *models.ModelStorage
}

// IsSuccess returns true when this create webdav storage o k response has a 2xx status code
func (o *CreateWebdavStorageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create webdav storage o k response has a 3xx status code
func (o *CreateWebdavStorageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create webdav storage o k response has a 4xx status code
func (o *CreateWebdavStorageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create webdav storage o k response has a 5xx status code
func (o *CreateWebdavStorageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create webdav storage o k response a status code equal to that given
func (o *CreateWebdavStorageOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create webdav storage o k response
func (o *CreateWebdavStorageOK) Code() int {
	return 200
}

func (o *CreateWebdavStorageOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /storage/webdav][%d] createWebdavStorageOK %s", 200, payload)
}

func (o *CreateWebdavStorageOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /storage/webdav][%d] createWebdavStorageOK %s", 200, payload)
}

func (o *CreateWebdavStorageOK) GetPayload() *models.ModelStorage {
	return o.Payload
}

func (o *CreateWebdavStorageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelStorage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateWebdavStorageBadRequest creates a CreateWebdavStorageBadRequest with default headers values
func NewCreateWebdavStorageBadRequest() *CreateWebdavStorageBadRequest {
	return &CreateWebdavStorageBadRequest{}
}

/*
CreateWebdavStorageBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateWebdavStorageBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this create webdav storage bad request response has a 2xx status code
func (o *CreateWebdavStorageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create webdav storage bad request response has a 3xx status code
func (o *CreateWebdavStorageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create webdav storage bad request response has a 4xx status code
func (o *CreateWebdavStorageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create webdav storage bad request response has a 5xx status code
func (o *CreateWebdavStorageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create webdav storage bad request response a status code equal to that given
func (o *CreateWebdavStorageBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create webdav storage bad request response
func (o *CreateWebdavStorageBadRequest) Code() int {
	return 400
}

func (o *CreateWebdavStorageBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /storage/webdav][%d] createWebdavStorageBadRequest %s", 400, payload)
}

func (o *CreateWebdavStorageBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /storage/webdav][%d] createWebdavStorageBadRequest %s", 400, payload)
}

func (o *CreateWebdavStorageBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *CreateWebdavStorageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateWebdavStorageInternalServerError creates a CreateWebdavStorageInternalServerError with default headers values
func NewCreateWebdavStorageInternalServerError() *CreateWebdavStorageInternalServerError {
	return &CreateWebdavStorageInternalServerError{}
}

/*
CreateWebdavStorageInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateWebdavStorageInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this create webdav storage internal server error response has a 2xx status code
func (o *CreateWebdavStorageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create webdav storage internal server error response has a 3xx status code
func (o *CreateWebdavStorageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create webdav storage internal server error response has a 4xx status code
func (o *CreateWebdavStorageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create webdav storage internal server error response has a 5xx status code
func (o *CreateWebdavStorageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create webdav storage internal server error response a status code equal to that given
func (o *CreateWebdavStorageInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create webdav storage internal server error response
func (o *CreateWebdavStorageInternalServerError) Code() int {
	return 500
}

func (o *CreateWebdavStorageInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /storage/webdav][%d] createWebdavStorageInternalServerError %s", 500, payload)
}

func (o *CreateWebdavStorageInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /storage/webdav][%d] createWebdavStorageInternalServerError %s", 500, payload)
}

func (o *CreateWebdavStorageInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *CreateWebdavStorageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
