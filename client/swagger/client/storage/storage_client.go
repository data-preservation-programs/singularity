// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new storage API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new storage API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new storage API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for storage API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAcdStorage(params *CreateAcdStorageParams, opts ...ClientOption) (*CreateAcdStorageOK, error)

	CreateAzureblobStorage(params *CreateAzureblobStorageParams, opts ...ClientOption) (*CreateAzureblobStorageOK, error)

	CreateB2Storage(params *CreateB2StorageParams, opts ...ClientOption) (*CreateB2StorageOK, error)

	CreateBoxStorage(params *CreateBoxStorageParams, opts ...ClientOption) (*CreateBoxStorageOK, error)

	CreateDriveStorage(params *CreateDriveStorageParams, opts ...ClientOption) (*CreateDriveStorageOK, error)

	CreateDropboxStorage(params *CreateDropboxStorageParams, opts ...ClientOption) (*CreateDropboxStorageOK, error)

	CreateFichierStorage(params *CreateFichierStorageParams, opts ...ClientOption) (*CreateFichierStorageOK, error)

	CreateFilefabricStorage(params *CreateFilefabricStorageParams, opts ...ClientOption) (*CreateFilefabricStorageOK, error)

	CreateFtpStorage(params *CreateFtpStorageParams, opts ...ClientOption) (*CreateFtpStorageOK, error)

	CreateGcsStorage(params *CreateGcsStorageParams, opts ...ClientOption) (*CreateGcsStorageOK, error)

	CreateGphotosStorage(params *CreateGphotosStorageParams, opts ...ClientOption) (*CreateGphotosStorageOK, error)

	CreateHdfsStorage(params *CreateHdfsStorageParams, opts ...ClientOption) (*CreateHdfsStorageOK, error)

	CreateHidriveStorage(params *CreateHidriveStorageParams, opts ...ClientOption) (*CreateHidriveStorageOK, error)

	CreateHTTPStorage(params *CreateHTTPStorageParams, opts ...ClientOption) (*CreateHTTPStorageOK, error)

	CreateInternetarchiveStorage(params *CreateInternetarchiveStorageParams, opts ...ClientOption) (*CreateInternetarchiveStorageOK, error)

	CreateJottacloudStorage(params *CreateJottacloudStorageParams, opts ...ClientOption) (*CreateJottacloudStorageOK, error)

	CreateKoofrDigistorageStorage(params *CreateKoofrDigistorageStorageParams, opts ...ClientOption) (*CreateKoofrDigistorageStorageOK, error)

	CreateKoofrKoofrStorage(params *CreateKoofrKoofrStorageParams, opts ...ClientOption) (*CreateKoofrKoofrStorageOK, error)

	CreateKoofrOtherStorage(params *CreateKoofrOtherStorageParams, opts ...ClientOption) (*CreateKoofrOtherStorageOK, error)

	CreateLocalStorage(params *CreateLocalStorageParams, opts ...ClientOption) (*CreateLocalStorageOK, error)

	CreateMailruStorage(params *CreateMailruStorageParams, opts ...ClientOption) (*CreateMailruStorageOK, error)

	CreateMegaStorage(params *CreateMegaStorageParams, opts ...ClientOption) (*CreateMegaStorageOK, error)

	CreateNetstorageStorage(params *CreateNetstorageStorageParams, opts ...ClientOption) (*CreateNetstorageStorageOK, error)

	CreateOnedriveStorage(params *CreateOnedriveStorageParams, opts ...ClientOption) (*CreateOnedriveStorageOK, error)

	CreateOosEnvAuthStorage(params *CreateOosEnvAuthStorageParams, opts ...ClientOption) (*CreateOosEnvAuthStorageOK, error)

	CreateOosInstancePrincipalAuthStorage(params *CreateOosInstancePrincipalAuthStorageParams, opts ...ClientOption) (*CreateOosInstancePrincipalAuthStorageOK, error)

	CreateOosNoAuthStorage(params *CreateOosNoAuthStorageParams, opts ...ClientOption) (*CreateOosNoAuthStorageOK, error)

	CreateOosResourcePrincipalAuthStorage(params *CreateOosResourcePrincipalAuthStorageParams, opts ...ClientOption) (*CreateOosResourcePrincipalAuthStorageOK, error)

	CreateOosUserPrincipalAuthStorage(params *CreateOosUserPrincipalAuthStorageParams, opts ...ClientOption) (*CreateOosUserPrincipalAuthStorageOK, error)

	CreateOpendriveStorage(params *CreateOpendriveStorageParams, opts ...ClientOption) (*CreateOpendriveStorageOK, error)

	CreatePcloudStorage(params *CreatePcloudStorageParams, opts ...ClientOption) (*CreatePcloudStorageOK, error)

	CreatePremiumizemeStorage(params *CreatePremiumizemeStorageParams, opts ...ClientOption) (*CreatePremiumizemeStorageOK, error)

	CreatePutioStorage(params *CreatePutioStorageParams, opts ...ClientOption) (*CreatePutioStorageOK, error)

	CreateQingstorStorage(params *CreateQingstorStorageParams, opts ...ClientOption) (*CreateQingstorStorageOK, error)

	CreateS3AWSStorage(params *CreateS3AWSStorageParams, opts ...ClientOption) (*CreateS3AWSStorageOK, error)

	CreateS3AlibabaStorage(params *CreateS3AlibabaStorageParams, opts ...ClientOption) (*CreateS3AlibabaStorageOK, error)

	CreateS3ArvanCloudStorage(params *CreateS3ArvanCloudStorageParams, opts ...ClientOption) (*CreateS3ArvanCloudStorageOK, error)

	CreateS3CephStorage(params *CreateS3CephStorageParams, opts ...ClientOption) (*CreateS3CephStorageOK, error)

	CreateS3ChinaMobileStorage(params *CreateS3ChinaMobileStorageParams, opts ...ClientOption) (*CreateS3ChinaMobileStorageOK, error)

	CreateS3CloudflareStorage(params *CreateS3CloudflareStorageParams, opts ...ClientOption) (*CreateS3CloudflareStorageOK, error)

	CreateS3DigitalOceanStorage(params *CreateS3DigitalOceanStorageParams, opts ...ClientOption) (*CreateS3DigitalOceanStorageOK, error)

	CreateS3DreamhostStorage(params *CreateS3DreamhostStorageParams, opts ...ClientOption) (*CreateS3DreamhostStorageOK, error)

	CreateS3HuaweiOBSStorage(params *CreateS3HuaweiOBSStorageParams, opts ...ClientOption) (*CreateS3HuaweiOBSStorageOK, error)

	CreateS3IBMCOSStorage(params *CreateS3IBMCOSStorageParams, opts ...ClientOption) (*CreateS3IBMCOSStorageOK, error)

	CreateS3IDriveStorage(params *CreateS3IDriveStorageParams, opts ...ClientOption) (*CreateS3IDriveStorageOK, error)

	CreateS3IONOSStorage(params *CreateS3IONOSStorageParams, opts ...ClientOption) (*CreateS3IONOSStorageOK, error)

	CreateS3LiaraStorage(params *CreateS3LiaraStorageParams, opts ...ClientOption) (*CreateS3LiaraStorageOK, error)

	CreateS3LyveCloudStorage(params *CreateS3LyveCloudStorageParams, opts ...ClientOption) (*CreateS3LyveCloudStorageOK, error)

	CreateS3MinioStorage(params *CreateS3MinioStorageParams, opts ...ClientOption) (*CreateS3MinioStorageOK, error)

	CreateS3NeteaseStorage(params *CreateS3NeteaseStorageParams, opts ...ClientOption) (*CreateS3NeteaseStorageOK, error)

	CreateS3OtherStorage(params *CreateS3OtherStorageParams, opts ...ClientOption) (*CreateS3OtherStorageOK, error)

	CreateS3QiniuStorage(params *CreateS3QiniuStorageParams, opts ...ClientOption) (*CreateS3QiniuStorageOK, error)

	CreateS3RackCorpStorage(params *CreateS3RackCorpStorageParams, opts ...ClientOption) (*CreateS3RackCorpStorageOK, error)

	CreateS3ScalewayStorage(params *CreateS3ScalewayStorageParams, opts ...ClientOption) (*CreateS3ScalewayStorageOK, error)

	CreateS3SeaweedFSStorage(params *CreateS3SeaweedFSStorageParams, opts ...ClientOption) (*CreateS3SeaweedFSStorageOK, error)

	CreateS3StackPathStorage(params *CreateS3StackPathStorageParams, opts ...ClientOption) (*CreateS3StackPathStorageOK, error)

	CreateS3StorjStorage(params *CreateS3StorjStorageParams, opts ...ClientOption) (*CreateS3StorjStorageOK, error)

	CreateS3TencentCOSStorage(params *CreateS3TencentCOSStorageParams, opts ...ClientOption) (*CreateS3TencentCOSStorageOK, error)

	CreateS3WasabiStorage(params *CreateS3WasabiStorageParams, opts ...ClientOption) (*CreateS3WasabiStorageOK, error)

	CreateSeafileStorage(params *CreateSeafileStorageParams, opts ...ClientOption) (*CreateSeafileStorageOK, error)

	CreateSftpStorage(params *CreateSftpStorageParams, opts ...ClientOption) (*CreateSftpStorageOK, error)

	CreateSharefileStorage(params *CreateSharefileStorageParams, opts ...ClientOption) (*CreateSharefileStorageOK, error)

	CreateSiaStorage(params *CreateSiaStorageParams, opts ...ClientOption) (*CreateSiaStorageOK, error)

	CreateSmbStorage(params *CreateSmbStorageParams, opts ...ClientOption) (*CreateSmbStorageOK, error)

	CreateStorjExistingStorage(params *CreateStorjExistingStorageParams, opts ...ClientOption) (*CreateStorjExistingStorageOK, error)

	CreateStorjNewStorage(params *CreateStorjNewStorageParams, opts ...ClientOption) (*CreateStorjNewStorageOK, error)

	CreateSugarsyncStorage(params *CreateSugarsyncStorageParams, opts ...ClientOption) (*CreateSugarsyncStorageOK, error)

	CreateSwiftStorage(params *CreateSwiftStorageParams, opts ...ClientOption) (*CreateSwiftStorageOK, error)

	CreateUnionStorage(params *CreateUnionStorageParams, opts ...ClientOption) (*CreateUnionStorageOK, error)

	CreateUptoboxStorage(params *CreateUptoboxStorageParams, opts ...ClientOption) (*CreateUptoboxStorageOK, error)

	CreateWebdavStorage(params *CreateWebdavStorageParams, opts ...ClientOption) (*CreateWebdavStorageOK, error)

	CreateYandexStorage(params *CreateYandexStorageParams, opts ...ClientOption) (*CreateYandexStorageOK, error)

	CreateZohoStorage(params *CreateZohoStorageParams, opts ...ClientOption) (*CreateZohoStorageOK, error)

	ExploreStorage(params *ExploreStorageParams, opts ...ClientOption) (*ExploreStorageOK, error)

	ListStorages(params *ListStoragesParams, opts ...ClientOption) (*ListStoragesOK, error)

	RemoveStorage(params *RemoveStorageParams, opts ...ClientOption) (*RemoveStorageNoContent, error)

	RenameStorage(params *RenameStorageParams, opts ...ClientOption) (*RenameStorageOK, error)

	UpdateStorage(params *UpdateStorageParams, opts ...ClientOption) (*UpdateStorageOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAcdStorage creates acd storage
*/
func (a *Client) CreateAcdStorage(params *CreateAcdStorageParams, opts ...ClientOption) (*CreateAcdStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAcdStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateAcdStorage",
		Method:             "POST",
		PathPattern:        "/storage/acd",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAcdStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAcdStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateAcdStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateAzureblobStorage creates azureblob storage
*/
func (a *Client) CreateAzureblobStorage(params *CreateAzureblobStorageParams, opts ...ClientOption) (*CreateAzureblobStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAzureblobStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateAzureblobStorage",
		Method:             "POST",
		PathPattern:        "/storage/azureblob",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAzureblobStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAzureblobStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateAzureblobStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateB2Storage creates b2 storage
*/
func (a *Client) CreateB2Storage(params *CreateB2StorageParams, opts ...ClientOption) (*CreateB2StorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateB2StorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateB2Storage",
		Method:             "POST",
		PathPattern:        "/storage/b2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateB2StorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateB2StorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateB2Storage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateBoxStorage creates box storage
*/
func (a *Client) CreateBoxStorage(params *CreateBoxStorageParams, opts ...ClientOption) (*CreateBoxStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBoxStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateBoxStorage",
		Method:             "POST",
		PathPattern:        "/storage/box",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBoxStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBoxStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateBoxStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateDriveStorage creates drive storage
*/
func (a *Client) CreateDriveStorage(params *CreateDriveStorageParams, opts ...ClientOption) (*CreateDriveStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDriveStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDriveStorage",
		Method:             "POST",
		PathPattern:        "/storage/drive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDriveStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDriveStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateDriveStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateDropboxStorage creates dropbox storage
*/
func (a *Client) CreateDropboxStorage(params *CreateDropboxStorageParams, opts ...ClientOption) (*CreateDropboxStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDropboxStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDropboxStorage",
		Method:             "POST",
		PathPattern:        "/storage/dropbox",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDropboxStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDropboxStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateDropboxStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateFichierStorage creates fichier storage
*/
func (a *Client) CreateFichierStorage(params *CreateFichierStorageParams, opts ...ClientOption) (*CreateFichierStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFichierStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateFichierStorage",
		Method:             "POST",
		PathPattern:        "/storage/fichier",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFichierStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFichierStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateFichierStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateFilefabricStorage creates filefabric storage
*/
func (a *Client) CreateFilefabricStorage(params *CreateFilefabricStorageParams, opts ...ClientOption) (*CreateFilefabricStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFilefabricStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateFilefabricStorage",
		Method:             "POST",
		PathPattern:        "/storage/filefabric",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFilefabricStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFilefabricStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateFilefabricStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateFtpStorage creates ftp storage
*/
func (a *Client) CreateFtpStorage(params *CreateFtpStorageParams, opts ...ClientOption) (*CreateFtpStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFtpStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateFtpStorage",
		Method:             "POST",
		PathPattern:        "/storage/ftp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFtpStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFtpStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateFtpStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateGcsStorage creates gcs storage
*/
func (a *Client) CreateGcsStorage(params *CreateGcsStorageParams, opts ...ClientOption) (*CreateGcsStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGcsStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateGcsStorage",
		Method:             "POST",
		PathPattern:        "/storage/gcs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGcsStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGcsStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateGcsStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateGphotosStorage creates gphotos storage
*/
func (a *Client) CreateGphotosStorage(params *CreateGphotosStorageParams, opts ...ClientOption) (*CreateGphotosStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGphotosStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateGphotosStorage",
		Method:             "POST",
		PathPattern:        "/storage/gphotos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGphotosStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGphotosStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateGphotosStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateHdfsStorage creates hdfs storage
*/
func (a *Client) CreateHdfsStorage(params *CreateHdfsStorageParams, opts ...ClientOption) (*CreateHdfsStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHdfsStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateHdfsStorage",
		Method:             "POST",
		PathPattern:        "/storage/hdfs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateHdfsStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateHdfsStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateHdfsStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateHidriveStorage creates hidrive storage
*/
func (a *Client) CreateHidriveStorage(params *CreateHidriveStorageParams, opts ...ClientOption) (*CreateHidriveStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHidriveStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateHidriveStorage",
		Method:             "POST",
		PathPattern:        "/storage/hidrive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateHidriveStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateHidriveStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateHidriveStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateHTTPStorage creates Http storage
*/
func (a *Client) CreateHTTPStorage(params *CreateHTTPStorageParams, opts ...ClientOption) (*CreateHTTPStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHTTPStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateHttpStorage",
		Method:             "POST",
		PathPattern:        "/storage/http",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateHTTPStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateHTTPStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateHttpStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateInternetarchiveStorage creates internetarchive storage
*/
func (a *Client) CreateInternetarchiveStorage(params *CreateInternetarchiveStorageParams, opts ...ClientOption) (*CreateInternetarchiveStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInternetarchiveStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateInternetarchiveStorage",
		Method:             "POST",
		PathPattern:        "/storage/internetarchive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateInternetarchiveStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateInternetarchiveStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateInternetarchiveStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateJottacloudStorage creates jottacloud storage
*/
func (a *Client) CreateJottacloudStorage(params *CreateJottacloudStorageParams, opts ...ClientOption) (*CreateJottacloudStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateJottacloudStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateJottacloudStorage",
		Method:             "POST",
		PathPattern:        "/storage/jottacloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateJottacloudStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateJottacloudStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateJottacloudStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateKoofrDigistorageStorage creates koofr storage with digistorage digi storage https storage rcs rds ro
*/
func (a *Client) CreateKoofrDigistorageStorage(params *CreateKoofrDigistorageStorageParams, opts ...ClientOption) (*CreateKoofrDigistorageStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateKoofrDigistorageStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateKoofrDigistorageStorage",
		Method:             "POST",
		PathPattern:        "/storage/koofr/digistorage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateKoofrDigistorageStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateKoofrDigistorageStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateKoofrDigistorageStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateKoofrKoofrStorage creates koofr storage with koofr koofr https app koofr net
*/
func (a *Client) CreateKoofrKoofrStorage(params *CreateKoofrKoofrStorageParams, opts ...ClientOption) (*CreateKoofrKoofrStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateKoofrKoofrStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateKoofrKoofrStorage",
		Method:             "POST",
		PathPattern:        "/storage/koofr/koofr",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateKoofrKoofrStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateKoofrKoofrStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateKoofrKoofrStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateKoofrOtherStorage creates koofr storage with other any other koofr API compatible storage service
*/
func (a *Client) CreateKoofrOtherStorage(params *CreateKoofrOtherStorageParams, opts ...ClientOption) (*CreateKoofrOtherStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateKoofrOtherStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateKoofrOtherStorage",
		Method:             "POST",
		PathPattern:        "/storage/koofr/other",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateKoofrOtherStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateKoofrOtherStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateKoofrOtherStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateLocalStorage creates local storage
*/
func (a *Client) CreateLocalStorage(params *CreateLocalStorageParams, opts ...ClientOption) (*CreateLocalStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLocalStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateLocalStorage",
		Method:             "POST",
		PathPattern:        "/storage/local",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateLocalStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLocalStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateLocalStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateMailruStorage creates mailru storage
*/
func (a *Client) CreateMailruStorage(params *CreateMailruStorageParams, opts ...ClientOption) (*CreateMailruStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMailruStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateMailruStorage",
		Method:             "POST",
		PathPattern:        "/storage/mailru",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMailruStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMailruStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateMailruStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateMegaStorage creates mega storage
*/
func (a *Client) CreateMegaStorage(params *CreateMegaStorageParams, opts ...ClientOption) (*CreateMegaStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMegaStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateMegaStorage",
		Method:             "POST",
		PathPattern:        "/storage/mega",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMegaStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMegaStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateMegaStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateNetstorageStorage creates netstorage storage
*/
func (a *Client) CreateNetstorageStorage(params *CreateNetstorageStorageParams, opts ...ClientOption) (*CreateNetstorageStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetstorageStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateNetstorageStorage",
		Method:             "POST",
		PathPattern:        "/storage/netstorage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNetstorageStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetstorageStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateNetstorageStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateOnedriveStorage creates onedrive storage
*/
func (a *Client) CreateOnedriveStorage(params *CreateOnedriveStorageParams, opts ...ClientOption) (*CreateOnedriveStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOnedriveStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateOnedriveStorage",
		Method:             "POST",
		PathPattern:        "/storage/onedrive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOnedriveStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOnedriveStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateOnedriveStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateOosEnvAuthStorage creates oos storage with env auth automatically pickup the credentials from runtime env first one to provide auth wins
*/
func (a *Client) CreateOosEnvAuthStorage(params *CreateOosEnvAuthStorageParams, opts ...ClientOption) (*CreateOosEnvAuthStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOosEnvAuthStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateOosEnv_authStorage",
		Method:             "POST",
		PathPattern:        "/storage/oos/env_auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOosEnvAuthStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOosEnvAuthStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateOosEnv_authStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateOosInstancePrincipalAuthStorage creates oos storage with instance principal auth use instance principals to authorize an instance to make API calls
*/
func (a *Client) CreateOosInstancePrincipalAuthStorage(params *CreateOosInstancePrincipalAuthStorageParams, opts ...ClientOption) (*CreateOosInstancePrincipalAuthStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOosInstancePrincipalAuthStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateOosInstance_principal_authStorage",
		Method:             "POST",
		PathPattern:        "/storage/oos/instance_principal_auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOosInstancePrincipalAuthStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOosInstancePrincipalAuthStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateOosInstance_principal_authStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateOosNoAuthStorage creates oos storage with no auth no credentials needed this is typically for reading public buckets
*/
func (a *Client) CreateOosNoAuthStorage(params *CreateOosNoAuthStorageParams, opts ...ClientOption) (*CreateOosNoAuthStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOosNoAuthStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateOosNo_authStorage",
		Method:             "POST",
		PathPattern:        "/storage/oos/no_auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOosNoAuthStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOosNoAuthStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateOosNo_authStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateOosResourcePrincipalAuthStorage creates oos storage with resource principal auth use resource principals to make API calls
*/
func (a *Client) CreateOosResourcePrincipalAuthStorage(params *CreateOosResourcePrincipalAuthStorageParams, opts ...ClientOption) (*CreateOosResourcePrincipalAuthStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOosResourcePrincipalAuthStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateOosResource_principal_authStorage",
		Method:             "POST",
		PathPattern:        "/storage/oos/resource_principal_auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOosResourcePrincipalAuthStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOosResourcePrincipalAuthStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateOosResource_principal_authStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateOosUserPrincipalAuthStorage creates oos storage with user principal auth use an o c i user and an API key for authentication
*/
func (a *Client) CreateOosUserPrincipalAuthStorage(params *CreateOosUserPrincipalAuthStorageParams, opts ...ClientOption) (*CreateOosUserPrincipalAuthStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOosUserPrincipalAuthStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateOosUser_principal_authStorage",
		Method:             "POST",
		PathPattern:        "/storage/oos/user_principal_auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOosUserPrincipalAuthStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOosUserPrincipalAuthStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateOosUser_principal_authStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateOpendriveStorage creates opendrive storage
*/
func (a *Client) CreateOpendriveStorage(params *CreateOpendriveStorageParams, opts ...ClientOption) (*CreateOpendriveStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOpendriveStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateOpendriveStorage",
		Method:             "POST",
		PathPattern:        "/storage/opendrive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOpendriveStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOpendriveStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateOpendriveStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePcloudStorage creates pcloud storage
*/
func (a *Client) CreatePcloudStorage(params *CreatePcloudStorageParams, opts ...ClientOption) (*CreatePcloudStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePcloudStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreatePcloudStorage",
		Method:             "POST",
		PathPattern:        "/storage/pcloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePcloudStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePcloudStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePcloudStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePremiumizemeStorage creates premiumizeme storage
*/
func (a *Client) CreatePremiumizemeStorage(params *CreatePremiumizemeStorageParams, opts ...ClientOption) (*CreatePremiumizemeStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePremiumizemeStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreatePremiumizemeStorage",
		Method:             "POST",
		PathPattern:        "/storage/premiumizeme",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePremiumizemeStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePremiumizemeStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePremiumizemeStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePutioStorage creates putio storage
*/
func (a *Client) CreatePutioStorage(params *CreatePutioStorageParams, opts ...ClientOption) (*CreatePutioStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePutioStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreatePutioStorage",
		Method:             "POST",
		PathPattern:        "/storage/putio",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePutioStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePutioStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePutioStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateQingstorStorage creates qingstor storage
*/
func (a *Client) CreateQingstorStorage(params *CreateQingstorStorageParams, opts ...ClientOption) (*CreateQingstorStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateQingstorStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateQingstorStorage",
		Method:             "POST",
		PathPattern:        "/storage/qingstor",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateQingstorStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateQingstorStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateQingstorStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3AWSStorage creates s3 storage with a w s amazon web services a w s s3
*/
func (a *Client) CreateS3AWSStorage(params *CreateS3AWSStorageParams, opts ...ClientOption) (*CreateS3AWSStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3AWSStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3AWSStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/aws",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3AWSStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3AWSStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3AWSStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3AlibabaStorage creates s3 storage with alibaba alibaba cloud object storage system o s s formerly aliyun
*/
func (a *Client) CreateS3AlibabaStorage(params *CreateS3AlibabaStorageParams, opts ...ClientOption) (*CreateS3AlibabaStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3AlibabaStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3AlibabaStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/alibaba",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3AlibabaStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3AlibabaStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3AlibabaStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3ArvanCloudStorage creates s3 storage with arvan cloud arvan cloud object storage a o s
*/
func (a *Client) CreateS3ArvanCloudStorage(params *CreateS3ArvanCloudStorageParams, opts ...ClientOption) (*CreateS3ArvanCloudStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3ArvanCloudStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3ArvanCloudStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/arvancloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3ArvanCloudStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3ArvanCloudStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3ArvanCloudStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3CephStorage creates s3 storage with ceph ceph object storage
*/
func (a *Client) CreateS3CephStorage(params *CreateS3CephStorageParams, opts ...ClientOption) (*CreateS3CephStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3CephStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3CephStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/ceph",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3CephStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3CephStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3CephStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3ChinaMobileStorage creates s3 storage with china mobile china mobile ecloud elastic object storage e o s
*/
func (a *Client) CreateS3ChinaMobileStorage(params *CreateS3ChinaMobileStorageParams, opts ...ClientOption) (*CreateS3ChinaMobileStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3ChinaMobileStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3ChinaMobileStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/chinamobile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3ChinaMobileStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3ChinaMobileStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3ChinaMobileStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3CloudflareStorage creates s3 storage with cloudflare cloudflare r2 storage
*/
func (a *Client) CreateS3CloudflareStorage(params *CreateS3CloudflareStorageParams, opts ...ClientOption) (*CreateS3CloudflareStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3CloudflareStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3CloudflareStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/cloudflare",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3CloudflareStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3CloudflareStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3CloudflareStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3DigitalOceanStorage creates s3 storage with digital ocean digital ocean spaces
*/
func (a *Client) CreateS3DigitalOceanStorage(params *CreateS3DigitalOceanStorageParams, opts ...ClientOption) (*CreateS3DigitalOceanStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3DigitalOceanStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3DigitalOceanStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/digitalocean",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3DigitalOceanStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3DigitalOceanStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3DigitalOceanStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3DreamhostStorage creates s3 storage with dreamhost dreamhost dream objects
*/
func (a *Client) CreateS3DreamhostStorage(params *CreateS3DreamhostStorageParams, opts ...ClientOption) (*CreateS3DreamhostStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3DreamhostStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3DreamhostStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/dreamhost",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3DreamhostStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3DreamhostStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3DreamhostStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3HuaweiOBSStorage creates s3 storage with huawei o b s huawei object storage service
*/
func (a *Client) CreateS3HuaweiOBSStorage(params *CreateS3HuaweiOBSStorageParams, opts ...ClientOption) (*CreateS3HuaweiOBSStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3HuaweiOBSStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3HuaweiOBSStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/huaweiobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3HuaweiOBSStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3HuaweiOBSStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3HuaweiOBSStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3IBMCOSStorage creates s3 storage with i b m c o s i b m c o s s3
*/
func (a *Client) CreateS3IBMCOSStorage(params *CreateS3IBMCOSStorageParams, opts ...ClientOption) (*CreateS3IBMCOSStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3IBMCOSStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3IBMCOSStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/ibmcos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3IBMCOSStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3IBMCOSStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3IBMCOSStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3IDriveStorage creates s3 storage with i drive i drive e2
*/
func (a *Client) CreateS3IDriveStorage(params *CreateS3IDriveStorageParams, opts ...ClientOption) (*CreateS3IDriveStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3IDriveStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3IDriveStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/idrive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3IDriveStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3IDriveStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3IDriveStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3IONOSStorage creates s3 storage with i o n o s i o n o s cloud
*/
func (a *Client) CreateS3IONOSStorage(params *CreateS3IONOSStorageParams, opts ...ClientOption) (*CreateS3IONOSStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3IONOSStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3IONOSStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/ionos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3IONOSStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3IONOSStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3IONOSStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3LiaraStorage creates s3 storage with liara liara object storage
*/
func (a *Client) CreateS3LiaraStorage(params *CreateS3LiaraStorageParams, opts ...ClientOption) (*CreateS3LiaraStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3LiaraStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3LiaraStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/liara",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3LiaraStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3LiaraStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3LiaraStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3LyveCloudStorage creates s3 storage with lyve cloud seagate lyve cloud
*/
func (a *Client) CreateS3LyveCloudStorage(params *CreateS3LyveCloudStorageParams, opts ...ClientOption) (*CreateS3LyveCloudStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3LyveCloudStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3LyveCloudStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/lyvecloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3LyveCloudStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3LyveCloudStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3LyveCloudStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3MinioStorage creates s3 storage with minio minio object storage
*/
func (a *Client) CreateS3MinioStorage(params *CreateS3MinioStorageParams, opts ...ClientOption) (*CreateS3MinioStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3MinioStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3MinioStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/minio",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3MinioStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3MinioStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3MinioStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3NeteaseStorage creates s3 storage with netease netease object storage n o s
*/
func (a *Client) CreateS3NeteaseStorage(params *CreateS3NeteaseStorageParams, opts ...ClientOption) (*CreateS3NeteaseStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3NeteaseStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3NeteaseStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/netease",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3NeteaseStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3NeteaseStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3NeteaseStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3OtherStorage creates s3 storage with other any other s3 compatible provider
*/
func (a *Client) CreateS3OtherStorage(params *CreateS3OtherStorageParams, opts ...ClientOption) (*CreateS3OtherStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3OtherStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3OtherStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/other",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3OtherStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3OtherStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3OtherStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3QiniuStorage creates s3 storage with qiniu qiniu object storage kodo
*/
func (a *Client) CreateS3QiniuStorage(params *CreateS3QiniuStorageParams, opts ...ClientOption) (*CreateS3QiniuStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3QiniuStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3QiniuStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/qiniu",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3QiniuStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3QiniuStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3QiniuStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3RackCorpStorage creates s3 storage with rack corp rack corp object storage
*/
func (a *Client) CreateS3RackCorpStorage(params *CreateS3RackCorpStorageParams, opts ...ClientOption) (*CreateS3RackCorpStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3RackCorpStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3RackCorpStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/rackcorp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3RackCorpStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3RackCorpStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3RackCorpStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3ScalewayStorage creates s3 storage with scaleway scaleway object storage
*/
func (a *Client) CreateS3ScalewayStorage(params *CreateS3ScalewayStorageParams, opts ...ClientOption) (*CreateS3ScalewayStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3ScalewayStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3ScalewayStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/scaleway",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3ScalewayStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3ScalewayStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3ScalewayStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3SeaweedFSStorage creates s3 storage with seaweed f s seaweed f s s3
*/
func (a *Client) CreateS3SeaweedFSStorage(params *CreateS3SeaweedFSStorageParams, opts ...ClientOption) (*CreateS3SeaweedFSStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3SeaweedFSStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3SeaweedFSStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/seaweedfs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3SeaweedFSStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3SeaweedFSStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3SeaweedFSStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3StackPathStorage creates s3 storage with stack path stack path object storage
*/
func (a *Client) CreateS3StackPathStorage(params *CreateS3StackPathStorageParams, opts ...ClientOption) (*CreateS3StackPathStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3StackPathStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3StackPathStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/stackpath",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3StackPathStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3StackPathStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3StackPathStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3StorjStorage creates s3 storage with storj storj s3 compatible gateway
*/
func (a *Client) CreateS3StorjStorage(params *CreateS3StorjStorageParams, opts ...ClientOption) (*CreateS3StorjStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3StorjStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3StorjStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/storj",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3StorjStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3StorjStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3StorjStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3TencentCOSStorage creates s3 storage with tencent c o s tencent cloud object storage c o s
*/
func (a *Client) CreateS3TencentCOSStorage(params *CreateS3TencentCOSStorageParams, opts ...ClientOption) (*CreateS3TencentCOSStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3TencentCOSStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3TencentCOSStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/tencentcos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3TencentCOSStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3TencentCOSStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3TencentCOSStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateS3WasabiStorage creates s3 storage with wasabi wasabi object storage
*/
func (a *Client) CreateS3WasabiStorage(params *CreateS3WasabiStorageParams, opts ...ClientOption) (*CreateS3WasabiStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateS3WasabiStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateS3WasabiStorage",
		Method:             "POST",
		PathPattern:        "/storage/s3/wasabi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateS3WasabiStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateS3WasabiStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateS3WasabiStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSeafileStorage creates seafile storage
*/
func (a *Client) CreateSeafileStorage(params *CreateSeafileStorageParams, opts ...ClientOption) (*CreateSeafileStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSeafileStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSeafileStorage",
		Method:             "POST",
		PathPattern:        "/storage/seafile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSeafileStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSeafileStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSeafileStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSftpStorage creates sftp storage
*/
func (a *Client) CreateSftpStorage(params *CreateSftpStorageParams, opts ...ClientOption) (*CreateSftpStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSftpStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSftpStorage",
		Method:             "POST",
		PathPattern:        "/storage/sftp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSftpStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSftpStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSftpStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSharefileStorage creates sharefile storage
*/
func (a *Client) CreateSharefileStorage(params *CreateSharefileStorageParams, opts ...ClientOption) (*CreateSharefileStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSharefileStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSharefileStorage",
		Method:             "POST",
		PathPattern:        "/storage/sharefile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSharefileStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSharefileStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSharefileStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSiaStorage creates sia storage
*/
func (a *Client) CreateSiaStorage(params *CreateSiaStorageParams, opts ...ClientOption) (*CreateSiaStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSiaStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSiaStorage",
		Method:             "POST",
		PathPattern:        "/storage/sia",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSiaStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSiaStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSiaStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSmbStorage creates smb storage
*/
func (a *Client) CreateSmbStorage(params *CreateSmbStorageParams, opts ...ClientOption) (*CreateSmbStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSmbStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSmbStorage",
		Method:             "POST",
		PathPattern:        "/storage/smb",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSmbStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSmbStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSmbStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateStorjExistingStorage creates storj storage with existing use an existing access grant
*/
func (a *Client) CreateStorjExistingStorage(params *CreateStorjExistingStorageParams, opts ...ClientOption) (*CreateStorjExistingStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStorjExistingStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateStorjExistingStorage",
		Method:             "POST",
		PathPattern:        "/storage/storj/existing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateStorjExistingStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateStorjExistingStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateStorjExistingStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateStorjNewStorage creates storj storage with new create a new access grant from satellite address API key and passphrase
*/
func (a *Client) CreateStorjNewStorage(params *CreateStorjNewStorageParams, opts ...ClientOption) (*CreateStorjNewStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStorjNewStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateStorjNewStorage",
		Method:             "POST",
		PathPattern:        "/storage/storj/new",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateStorjNewStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateStorjNewStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateStorjNewStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSugarsyncStorage creates sugarsync storage
*/
func (a *Client) CreateSugarsyncStorage(params *CreateSugarsyncStorageParams, opts ...ClientOption) (*CreateSugarsyncStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSugarsyncStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSugarsyncStorage",
		Method:             "POST",
		PathPattern:        "/storage/sugarsync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSugarsyncStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSugarsyncStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSugarsyncStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSwiftStorage creates swift storage
*/
func (a *Client) CreateSwiftStorage(params *CreateSwiftStorageParams, opts ...ClientOption) (*CreateSwiftStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSwiftStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSwiftStorage",
		Method:             "POST",
		PathPattern:        "/storage/swift",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSwiftStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSwiftStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSwiftStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateUnionStorage creates union storage
*/
func (a *Client) CreateUnionStorage(params *CreateUnionStorageParams, opts ...ClientOption) (*CreateUnionStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUnionStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateUnionStorage",
		Method:             "POST",
		PathPattern:        "/storage/union",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUnionStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUnionStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateUnionStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateUptoboxStorage creates uptobox storage
*/
func (a *Client) CreateUptoboxStorage(params *CreateUptoboxStorageParams, opts ...ClientOption) (*CreateUptoboxStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUptoboxStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateUptoboxStorage",
		Method:             "POST",
		PathPattern:        "/storage/uptobox",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUptoboxStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUptoboxStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateUptoboxStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateWebdavStorage creates webdav storage
*/
func (a *Client) CreateWebdavStorage(params *CreateWebdavStorageParams, opts ...ClientOption) (*CreateWebdavStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWebdavStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateWebdavStorage",
		Method:             "POST",
		PathPattern:        "/storage/webdav",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateWebdavStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateWebdavStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateWebdavStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateYandexStorage creates yandex storage
*/
func (a *Client) CreateYandexStorage(params *CreateYandexStorageParams, opts ...ClientOption) (*CreateYandexStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateYandexStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateYandexStorage",
		Method:             "POST",
		PathPattern:        "/storage/yandex",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateYandexStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateYandexStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateYandexStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateZohoStorage creates zoho storage
*/
func (a *Client) CreateZohoStorage(params *CreateZohoStorageParams, opts ...ClientOption) (*CreateZohoStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateZohoStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateZohoStorage",
		Method:             "POST",
		PathPattern:        "/storage/zoho",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateZohoStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateZohoStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateZohoStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExploreStorage explores directory entries in a storage system
*/
func (a *Client) ExploreStorage(params *ExploreStorageParams, opts ...ClientOption) (*ExploreStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExploreStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExploreStorage",
		Method:             "GET",
		PathPattern:        "/storage/{name}/explore/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExploreStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExploreStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExploreStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListStorages lists all storages
*/
func (a *Client) ListStorages(params *ListStoragesParams, opts ...ClientOption) (*ListStoragesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStoragesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListStorages",
		Method:             "GET",
		PathPattern:        "/storage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListStoragesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStoragesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListStorages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveStorage removes a storage
*/
func (a *Client) RemoveStorage(params *RemoveStorageParams, opts ...ClientOption) (*RemoveStorageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RemoveStorage",
		Method:             "DELETE",
		PathPattern:        "/storage/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveStorageNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RenameStorage renames a storage connection
*/
func (a *Client) RenameStorage(params *RenameStorageParams, opts ...ClientOption) (*RenameStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRenameStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RenameStorage",
		Method:             "PATCH",
		PathPattern:        "/storage/{name}/rename",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RenameStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RenameStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RenameStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateStorage updates a storage connection
*/
func (a *Client) UpdateStorage(params *UpdateStorageParams, opts ...ClientOption) (*UpdateStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateStorage",
		Method:             "PATCH",
		PathPattern:        "/storage/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
