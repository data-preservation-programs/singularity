// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// CreateSugarsyncStorageReader is a Reader for the CreateSugarsyncStorage structure.
type CreateSugarsyncStorageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateSugarsyncStorageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateSugarsyncStorageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateSugarsyncStorageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateSugarsyncStorageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /storage/sugarsync] CreateSugarsyncStorage", response, response.Code())
	}
}

// NewCreateSugarsyncStorageOK creates a CreateSugarsyncStorageOK with default headers values
func NewCreateSugarsyncStorageOK() *CreateSugarsyncStorageOK {
	return &CreateSugarsyncStorageOK{}
}

/*
CreateSugarsyncStorageOK describes a response with status code 200, with default header values.

OK
*/
type CreateSugarsyncStorageOK struct {
	Payload *models.ModelStorage
}

// IsSuccess returns true when this create sugarsync storage o k response has a 2xx status code
func (o *CreateSugarsyncStorageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create sugarsync storage o k response has a 3xx status code
func (o *CreateSugarsyncStorageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create sugarsync storage o k response has a 4xx status code
func (o *CreateSugarsyncStorageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create sugarsync storage o k response has a 5xx status code
func (o *CreateSugarsyncStorageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create sugarsync storage o k response a status code equal to that given
func (o *CreateSugarsyncStorageOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create sugarsync storage o k response
func (o *CreateSugarsyncStorageOK) Code() int {
	return 200
}

func (o *CreateSugarsyncStorageOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /storage/sugarsync][%d] createSugarsyncStorageOK %s", 200, payload)
}

func (o *CreateSugarsyncStorageOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /storage/sugarsync][%d] createSugarsyncStorageOK %s", 200, payload)
}

func (o *CreateSugarsyncStorageOK) GetPayload() *models.ModelStorage {
	return o.Payload
}

func (o *CreateSugarsyncStorageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelStorage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSugarsyncStorageBadRequest creates a CreateSugarsyncStorageBadRequest with default headers values
func NewCreateSugarsyncStorageBadRequest() *CreateSugarsyncStorageBadRequest {
	return &CreateSugarsyncStorageBadRequest{}
}

/*
CreateSugarsyncStorageBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateSugarsyncStorageBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this create sugarsync storage bad request response has a 2xx status code
func (o *CreateSugarsyncStorageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create sugarsync storage bad request response has a 3xx status code
func (o *CreateSugarsyncStorageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create sugarsync storage bad request response has a 4xx status code
func (o *CreateSugarsyncStorageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create sugarsync storage bad request response has a 5xx status code
func (o *CreateSugarsyncStorageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create sugarsync storage bad request response a status code equal to that given
func (o *CreateSugarsyncStorageBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create sugarsync storage bad request response
func (o *CreateSugarsyncStorageBadRequest) Code() int {
	return 400
}

func (o *CreateSugarsyncStorageBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /storage/sugarsync][%d] createSugarsyncStorageBadRequest %s", 400, payload)
}

func (o *CreateSugarsyncStorageBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /storage/sugarsync][%d] createSugarsyncStorageBadRequest %s", 400, payload)
}

func (o *CreateSugarsyncStorageBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *CreateSugarsyncStorageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSugarsyncStorageInternalServerError creates a CreateSugarsyncStorageInternalServerError with default headers values
func NewCreateSugarsyncStorageInternalServerError() *CreateSugarsyncStorageInternalServerError {
	return &CreateSugarsyncStorageInternalServerError{}
}

/*
CreateSugarsyncStorageInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateSugarsyncStorageInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this create sugarsync storage internal server error response has a 2xx status code
func (o *CreateSugarsyncStorageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create sugarsync storage internal server error response has a 3xx status code
func (o *CreateSugarsyncStorageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create sugarsync storage internal server error response has a 4xx status code
func (o *CreateSugarsyncStorageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create sugarsync storage internal server error response has a 5xx status code
func (o *CreateSugarsyncStorageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create sugarsync storage internal server error response a status code equal to that given
func (o *CreateSugarsyncStorageInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create sugarsync storage internal server error response
func (o *CreateSugarsyncStorageInternalServerError) Code() int {
	return 500
}

func (o *CreateSugarsyncStorageInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /storage/sugarsync][%d] createSugarsyncStorageInternalServerError %s", 500, payload)
}

func (o *CreateSugarsyncStorageInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /storage/sugarsync][%d] createSugarsyncStorageInternalServerError %s", 500, payload)
}

func (o *CreateSugarsyncStorageInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *CreateSugarsyncStorageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
