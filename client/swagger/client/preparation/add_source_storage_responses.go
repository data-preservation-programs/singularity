// Code generated by go-swagger; DO NOT EDIT.

package preparation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// AddSourceStorageReader is a Reader for the AddSourceStorage structure.
type AddSourceStorageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddSourceStorageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddSourceStorageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddSourceStorageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddSourceStorageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /preparation/{id}/source/{name}] AddSourceStorage", response, response.Code())
	}
}

// NewAddSourceStorageOK creates a AddSourceStorageOK with default headers values
func NewAddSourceStorageOK() *AddSourceStorageOK {
	return &AddSourceStorageOK{}
}

/*
AddSourceStorageOK describes a response with status code 200, with default header values.

OK
*/
type AddSourceStorageOK struct {
	Payload *models.ModelPreparation
}

// IsSuccess returns true when this add source storage o k response has a 2xx status code
func (o *AddSourceStorageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add source storage o k response has a 3xx status code
func (o *AddSourceStorageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add source storage o k response has a 4xx status code
func (o *AddSourceStorageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add source storage o k response has a 5xx status code
func (o *AddSourceStorageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add source storage o k response a status code equal to that given
func (o *AddSourceStorageOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add source storage o k response
func (o *AddSourceStorageOK) Code() int {
	return 200
}

func (o *AddSourceStorageOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /preparation/{id}/source/{name}][%d] addSourceStorageOK %s", 200, payload)
}

func (o *AddSourceStorageOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /preparation/{id}/source/{name}][%d] addSourceStorageOK %s", 200, payload)
}

func (o *AddSourceStorageOK) GetPayload() *models.ModelPreparation {
	return o.Payload
}

func (o *AddSourceStorageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelPreparation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddSourceStorageBadRequest creates a AddSourceStorageBadRequest with default headers values
func NewAddSourceStorageBadRequest() *AddSourceStorageBadRequest {
	return &AddSourceStorageBadRequest{}
}

/*
AddSourceStorageBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AddSourceStorageBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this add source storage bad request response has a 2xx status code
func (o *AddSourceStorageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add source storage bad request response has a 3xx status code
func (o *AddSourceStorageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add source storage bad request response has a 4xx status code
func (o *AddSourceStorageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add source storage bad request response has a 5xx status code
func (o *AddSourceStorageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add source storage bad request response a status code equal to that given
func (o *AddSourceStorageBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add source storage bad request response
func (o *AddSourceStorageBadRequest) Code() int {
	return 400
}

func (o *AddSourceStorageBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /preparation/{id}/source/{name}][%d] addSourceStorageBadRequest %s", 400, payload)
}

func (o *AddSourceStorageBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /preparation/{id}/source/{name}][%d] addSourceStorageBadRequest %s", 400, payload)
}

func (o *AddSourceStorageBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *AddSourceStorageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddSourceStorageInternalServerError creates a AddSourceStorageInternalServerError with default headers values
func NewAddSourceStorageInternalServerError() *AddSourceStorageInternalServerError {
	return &AddSourceStorageInternalServerError{}
}

/*
AddSourceStorageInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AddSourceStorageInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this add source storage internal server error response has a 2xx status code
func (o *AddSourceStorageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add source storage internal server error response has a 3xx status code
func (o *AddSourceStorageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add source storage internal server error response has a 4xx status code
func (o *AddSourceStorageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add source storage internal server error response has a 5xx status code
func (o *AddSourceStorageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add source storage internal server error response a status code equal to that given
func (o *AddSourceStorageInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add source storage internal server error response
func (o *AddSourceStorageInternalServerError) Code() int {
	return 500
}

func (o *AddSourceStorageInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /preparation/{id}/source/{name}][%d] addSourceStorageInternalServerError %s", 500, payload)
}

func (o *AddSourceStorageInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /preparation/{id}/source/{name}][%d] addSourceStorageInternalServerError %s", 500, payload)
}

func (o *AddSourceStorageInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *AddSourceStorageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
