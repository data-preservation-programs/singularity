// Code generated by go-swagger; DO NOT EDIT.

package preparation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// GetPreparationStatusReader is a Reader for the GetPreparationStatus structure.
type GetPreparationStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPreparationStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPreparationStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPreparationStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPreparationStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /preparation/{id}] GetPreparationStatus", response, response.Code())
	}
}

// NewGetPreparationStatusOK creates a GetPreparationStatusOK with default headers values
func NewGetPreparationStatusOK() *GetPreparationStatusOK {
	return &GetPreparationStatusOK{}
}

/*
GetPreparationStatusOK describes a response with status code 200, with default header values.

OK
*/
type GetPreparationStatusOK struct {
	Payload []*models.JobSourceStatus
}

// IsSuccess returns true when this get preparation status o k response has a 2xx status code
func (o *GetPreparationStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get preparation status o k response has a 3xx status code
func (o *GetPreparationStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get preparation status o k response has a 4xx status code
func (o *GetPreparationStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get preparation status o k response has a 5xx status code
func (o *GetPreparationStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get preparation status o k response a status code equal to that given
func (o *GetPreparationStatusOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get preparation status o k response
func (o *GetPreparationStatusOK) Code() int {
	return 200
}

func (o *GetPreparationStatusOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /preparation/{id}][%d] getPreparationStatusOK %s", 200, payload)
}

func (o *GetPreparationStatusOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /preparation/{id}][%d] getPreparationStatusOK %s", 200, payload)
}

func (o *GetPreparationStatusOK) GetPayload() []*models.JobSourceStatus {
	return o.Payload
}

func (o *GetPreparationStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPreparationStatusBadRequest creates a GetPreparationStatusBadRequest with default headers values
func NewGetPreparationStatusBadRequest() *GetPreparationStatusBadRequest {
	return &GetPreparationStatusBadRequest{}
}

/*
GetPreparationStatusBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetPreparationStatusBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this get preparation status bad request response has a 2xx status code
func (o *GetPreparationStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get preparation status bad request response has a 3xx status code
func (o *GetPreparationStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get preparation status bad request response has a 4xx status code
func (o *GetPreparationStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get preparation status bad request response has a 5xx status code
func (o *GetPreparationStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get preparation status bad request response a status code equal to that given
func (o *GetPreparationStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get preparation status bad request response
func (o *GetPreparationStatusBadRequest) Code() int {
	return 400
}

func (o *GetPreparationStatusBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /preparation/{id}][%d] getPreparationStatusBadRequest %s", 400, payload)
}

func (o *GetPreparationStatusBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /preparation/{id}][%d] getPreparationStatusBadRequest %s", 400, payload)
}

func (o *GetPreparationStatusBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *GetPreparationStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPreparationStatusInternalServerError creates a GetPreparationStatusInternalServerError with default headers values
func NewGetPreparationStatusInternalServerError() *GetPreparationStatusInternalServerError {
	return &GetPreparationStatusInternalServerError{}
}

/*
GetPreparationStatusInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetPreparationStatusInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this get preparation status internal server error response has a 2xx status code
func (o *GetPreparationStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get preparation status internal server error response has a 3xx status code
func (o *GetPreparationStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get preparation status internal server error response has a 4xx status code
func (o *GetPreparationStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get preparation status internal server error response has a 5xx status code
func (o *GetPreparationStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get preparation status internal server error response a status code equal to that given
func (o *GetPreparationStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get preparation status internal server error response
func (o *GetPreparationStatusInternalServerError) Code() int {
	return 500
}

func (o *GetPreparationStatusInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /preparation/{id}][%d] getPreparationStatusInternalServerError %s", 500, payload)
}

func (o *GetPreparationStatusInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /preparation/{id}][%d] getPreparationStatusInternalServerError %s", 500, payload)
}

func (o *GetPreparationStatusInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *GetPreparationStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
