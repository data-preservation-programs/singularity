// Code generated by go-swagger; DO NOT EDIT.

package preparation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// AddOutputStorageReader is a Reader for the AddOutputStorage structure.
type AddOutputStorageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddOutputStorageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddOutputStorageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddOutputStorageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddOutputStorageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /preparation/{id}/output/{name}] AddOutputStorage", response, response.Code())
	}
}

// NewAddOutputStorageOK creates a AddOutputStorageOK with default headers values
func NewAddOutputStorageOK() *AddOutputStorageOK {
	return &AddOutputStorageOK{}
}

/*
AddOutputStorageOK describes a response with status code 200, with default header values.

OK
*/
type AddOutputStorageOK struct {
	Payload *models.ModelPreparation
}

// IsSuccess returns true when this add output storage o k response has a 2xx status code
func (o *AddOutputStorageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add output storage o k response has a 3xx status code
func (o *AddOutputStorageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add output storage o k response has a 4xx status code
func (o *AddOutputStorageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add output storage o k response has a 5xx status code
func (o *AddOutputStorageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add output storage o k response a status code equal to that given
func (o *AddOutputStorageOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add output storage o k response
func (o *AddOutputStorageOK) Code() int {
	return 200
}

func (o *AddOutputStorageOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /preparation/{id}/output/{name}][%d] addOutputStorageOK %s", 200, payload)
}

func (o *AddOutputStorageOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /preparation/{id}/output/{name}][%d] addOutputStorageOK %s", 200, payload)
}

func (o *AddOutputStorageOK) GetPayload() *models.ModelPreparation {
	return o.Payload
}

func (o *AddOutputStorageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelPreparation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddOutputStorageBadRequest creates a AddOutputStorageBadRequest with default headers values
func NewAddOutputStorageBadRequest() *AddOutputStorageBadRequest {
	return &AddOutputStorageBadRequest{}
}

/*
AddOutputStorageBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AddOutputStorageBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this add output storage bad request response has a 2xx status code
func (o *AddOutputStorageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add output storage bad request response has a 3xx status code
func (o *AddOutputStorageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add output storage bad request response has a 4xx status code
func (o *AddOutputStorageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add output storage bad request response has a 5xx status code
func (o *AddOutputStorageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add output storage bad request response a status code equal to that given
func (o *AddOutputStorageBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add output storage bad request response
func (o *AddOutputStorageBadRequest) Code() int {
	return 400
}

func (o *AddOutputStorageBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /preparation/{id}/output/{name}][%d] addOutputStorageBadRequest %s", 400, payload)
}

func (o *AddOutputStorageBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /preparation/{id}/output/{name}][%d] addOutputStorageBadRequest %s", 400, payload)
}

func (o *AddOutputStorageBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *AddOutputStorageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddOutputStorageInternalServerError creates a AddOutputStorageInternalServerError with default headers values
func NewAddOutputStorageInternalServerError() *AddOutputStorageInternalServerError {
	return &AddOutputStorageInternalServerError{}
}

/*
AddOutputStorageInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AddOutputStorageInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this add output storage internal server error response has a 2xx status code
func (o *AddOutputStorageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add output storage internal server error response has a 3xx status code
func (o *AddOutputStorageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add output storage internal server error response has a 4xx status code
func (o *AddOutputStorageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add output storage internal server error response has a 5xx status code
func (o *AddOutputStorageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add output storage internal server error response a status code equal to that given
func (o *AddOutputStorageInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add output storage internal server error response
func (o *AddOutputStorageInternalServerError) Code() int {
	return 500
}

func (o *AddOutputStorageInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /preparation/{id}/output/{name}][%d] addOutputStorageInternalServerError %s", 500, payload)
}

func (o *AddOutputStorageInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /preparation/{id}/output/{name}][%d] addOutputStorageInternalServerError %s", 500, payload)
}

func (o *AddOutputStorageInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *AddOutputStorageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
