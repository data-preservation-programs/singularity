// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new job API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new job API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new job API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for job API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Pack(params *PackParams, opts ...ClientOption) (*PackOK, error)

	PauseDagGen(params *PauseDagGenParams, opts ...ClientOption) (*PauseDagGenOK, error)

	PausePack(params *PausePackParams, opts ...ClientOption) (*PausePackOK, error)

	PauseScan(params *PauseScanParams, opts ...ClientOption) (*PauseScanOK, error)

	PrepareToPackSource(params *PrepareToPackSourceParams, opts ...ClientOption) (*PrepareToPackSourceNoContent, error)

	StartDagGen(params *StartDagGenParams, opts ...ClientOption) (*StartDagGenOK, error)

	StartPack(params *StartPackParams, opts ...ClientOption) (*StartPackOK, error)

	StartScan(params *StartScanParams, opts ...ClientOption) (*StartScanOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
Pack packs a pack job into car files
*/
func (a *Client) Pack(params *PackParams, opts ...ClientOption) (*PackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Pack",
		Method:             "POST",
		PathPattern:        "/job/{id}/pack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Pack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PauseDagGen pauses an ongoing d a g generation job
*/
func (a *Client) PauseDagGen(params *PauseDagGenParams, opts ...ClientOption) (*PauseDagGenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPauseDagGenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PauseDagGen",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/source/{name}/pause-daggen",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PauseDagGenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PauseDagGenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PauseDagGen: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PausePack pauses a specific packing job
*/
func (a *Client) PausePack(params *PausePackParams, opts ...ClientOption) (*PausePackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPausePackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PausePack",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/source/{name}/pause-pack/{job_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PausePackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PausePackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PausePack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PauseScan pauses an ongoing scanning job
*/
func (a *Client) PauseScan(params *PauseScanParams, opts ...ClientOption) (*PauseScanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPauseScanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PauseScan",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/source/{name}/pause-scan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PauseScanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PauseScanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PauseScan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PrepareToPackSource prepares to pack a data source
*/
func (a *Client) PrepareToPackSource(params *PrepareToPackSourceParams, opts ...ClientOption) (*PrepareToPackSourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrepareToPackSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PrepareToPackSource",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/source/{name}/finalize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PrepareToPackSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PrepareToPackSourceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PrepareToPackSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StartDagGen starts a new d a g generation job
*/
func (a *Client) StartDagGen(params *StartDagGenParams, opts ...ClientOption) (*StartDagGenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartDagGenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StartDagGen",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/source/{name}/start-daggen",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartDagGenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartDagGenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StartDagGen: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StartPack starts or restart a specific packing job
*/
func (a *Client) StartPack(params *StartPackParams, opts ...ClientOption) (*StartPackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartPackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StartPack",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/source/{name}/start-pack/{job_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartPackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartPackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StartPack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StartScan starts a new scanning job
*/
func (a *Client) StartScan(params *StartScanParams, opts ...ClientOption) (*StartScanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartScanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StartScan",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/source/{name}/start-scan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartScanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartScanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StartScan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
