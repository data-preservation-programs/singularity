// Code generated by go-swagger; DO NOT EDIT.

package file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// PushFileReader is a Reader for the PushFile structure.
type PushFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PushFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPushFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPushFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPushFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /preparation/{id}/source/{name}/file] PushFile", response, response.Code())
	}
}

// NewPushFileOK creates a PushFileOK with default headers values
func NewPushFileOK() *PushFileOK {
	return &PushFileOK{}
}

/*
PushFileOK describes a response with status code 200, with default header values.

OK
*/
type PushFileOK struct {
	Payload *models.ModelFile
}

// IsSuccess returns true when this push file o k response has a 2xx status code
func (o *PushFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this push file o k response has a 3xx status code
func (o *PushFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push file o k response has a 4xx status code
func (o *PushFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this push file o k response has a 5xx status code
func (o *PushFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this push file o k response a status code equal to that given
func (o *PushFileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the push file o k response
func (o *PushFileOK) Code() int {
	return 200
}

func (o *PushFileOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /preparation/{id}/source/{name}/file][%d] pushFileOK %s", 200, payload)
}

func (o *PushFileOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /preparation/{id}/source/{name}/file][%d] pushFileOK %s", 200, payload)
}

func (o *PushFileOK) GetPayload() *models.ModelFile {
	return o.Payload
}

func (o *PushFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelFile)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPushFileBadRequest creates a PushFileBadRequest with default headers values
func NewPushFileBadRequest() *PushFileBadRequest {
	return &PushFileBadRequest{}
}

/*
PushFileBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PushFileBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this push file bad request response has a 2xx status code
func (o *PushFileBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this push file bad request response has a 3xx status code
func (o *PushFileBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push file bad request response has a 4xx status code
func (o *PushFileBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this push file bad request response has a 5xx status code
func (o *PushFileBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this push file bad request response a status code equal to that given
func (o *PushFileBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the push file bad request response
func (o *PushFileBadRequest) Code() int {
	return 400
}

func (o *PushFileBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /preparation/{id}/source/{name}/file][%d] pushFileBadRequest %s", 400, payload)
}

func (o *PushFileBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /preparation/{id}/source/{name}/file][%d] pushFileBadRequest %s", 400, payload)
}

func (o *PushFileBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PushFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPushFileInternalServerError creates a PushFileInternalServerError with default headers values
func NewPushFileInternalServerError() *PushFileInternalServerError {
	return &PushFileInternalServerError{}
}

/*
PushFileInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PushFileInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this push file internal server error response has a 2xx status code
func (o *PushFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this push file internal server error response has a 3xx status code
func (o *PushFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push file internal server error response has a 4xx status code
func (o *PushFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this push file internal server error response has a 5xx status code
func (o *PushFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this push file internal server error response a status code equal to that given
func (o *PushFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the push file internal server error response
func (o *PushFileInternalServerError) Code() int {
	return 500
}

func (o *PushFileInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /preparation/{id}/source/{name}/file][%d] pushFileInternalServerError %s", 500, payload)
}

func (o *PushFileInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /preparation/{id}/source/{name}/file][%d] pushFileInternalServerError %s", 500, payload)
}

func (o *PushFileInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PushFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
