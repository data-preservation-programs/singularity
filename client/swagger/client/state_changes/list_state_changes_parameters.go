// Code generated by go-swagger; DO NOT EDIT.

package state_changes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListStateChangesParams creates a new ListStateChangesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListStateChangesParams() *ListStateChangesParams {
	return &ListStateChangesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListStateChangesParamsWithTimeout creates a new ListStateChangesParams object
// with the ability to set a timeout on a request.
func NewListStateChangesParamsWithTimeout(timeout time.Duration) *ListStateChangesParams {
	return &ListStateChangesParams{
		timeout: timeout,
	}
}

// NewListStateChangesParamsWithContext creates a new ListStateChangesParams object
// with the ability to set a context for a request.
func NewListStateChangesParamsWithContext(ctx context.Context) *ListStateChangesParams {
	return &ListStateChangesParams{
		Context: ctx,
	}
}

// NewListStateChangesParamsWithHTTPClient creates a new ListStateChangesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListStateChangesParamsWithHTTPClient(client *http.Client) *ListStateChangesParams {
	return &ListStateChangesParams{
		HTTPClient: client,
	}
}

/*
ListStateChangesParams contains all the parameters to send to the API endpoint

	for the list state changes operation.

	Typically these are written to a http.Request.
*/
type ListStateChangesParams struct {

	/* ClientAddress.

	   Filter by client wallet address
	*/
	ClientAddress *string

	/* DealID.

	   Filter by deal ID
	*/
	DealID *string

	/* EndTime.

	   Filter changes before this time (RFC3339 format)
	*/
	EndTime *string

	/* Limit.

	   Maximum number of records to return

	   Default: 100
	*/
	Limit *int64

	/* Offset.

	   Number of records to skip for pagination
	*/
	Offset *int64

	/* Order.

	   Sort order

	   Default: "desc"
	*/
	Order *string

	/* OrderBy.

	   Field to sort by

	   Default: "timestamp"
	*/
	OrderBy *string

	/* ProviderID.

	   Filter by storage provider ID
	*/
	ProviderID *string

	/* StartTime.

	   Filter changes after this time (RFC3339 format)
	*/
	StartTime *string

	/* State.

	   Filter by new state
	*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list state changes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListStateChangesParams) WithDefaults() *ListStateChangesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list state changes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListStateChangesParams) SetDefaults() {
	var (
		limitDefault = int64(100)

		offsetDefault = int64(0)

		orderDefault = string("desc")

		orderByDefault = string("timestamp")
	)

	val := ListStateChangesParams{
		Limit:   &limitDefault,
		Offset:  &offsetDefault,
		Order:   &orderDefault,
		OrderBy: &orderByDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list state changes params
func (o *ListStateChangesParams) WithTimeout(timeout time.Duration) *ListStateChangesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list state changes params
func (o *ListStateChangesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list state changes params
func (o *ListStateChangesParams) WithContext(ctx context.Context) *ListStateChangesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list state changes params
func (o *ListStateChangesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list state changes params
func (o *ListStateChangesParams) WithHTTPClient(client *http.Client) *ListStateChangesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list state changes params
func (o *ListStateChangesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientAddress adds the clientAddress to the list state changes params
func (o *ListStateChangesParams) WithClientAddress(clientAddress *string) *ListStateChangesParams {
	o.SetClientAddress(clientAddress)
	return o
}

// SetClientAddress adds the clientAddress to the list state changes params
func (o *ListStateChangesParams) SetClientAddress(clientAddress *string) {
	o.ClientAddress = clientAddress
}

// WithDealID adds the dealID to the list state changes params
func (o *ListStateChangesParams) WithDealID(dealID *string) *ListStateChangesParams {
	o.SetDealID(dealID)
	return o
}

// SetDealID adds the dealId to the list state changes params
func (o *ListStateChangesParams) SetDealID(dealID *string) {
	o.DealID = dealID
}

// WithEndTime adds the endTime to the list state changes params
func (o *ListStateChangesParams) WithEndTime(endTime *string) *ListStateChangesParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the list state changes params
func (o *ListStateChangesParams) SetEndTime(endTime *string) {
	o.EndTime = endTime
}

// WithLimit adds the limit to the list state changes params
func (o *ListStateChangesParams) WithLimit(limit *int64) *ListStateChangesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list state changes params
func (o *ListStateChangesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the list state changes params
func (o *ListStateChangesParams) WithOffset(offset *int64) *ListStateChangesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the list state changes params
func (o *ListStateChangesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrder adds the order to the list state changes params
func (o *ListStateChangesParams) WithOrder(order *string) *ListStateChangesParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the list state changes params
func (o *ListStateChangesParams) SetOrder(order *string) {
	o.Order = order
}

// WithOrderBy adds the orderBy to the list state changes params
func (o *ListStateChangesParams) WithOrderBy(orderBy *string) *ListStateChangesParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the list state changes params
func (o *ListStateChangesParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithProviderID adds the providerID to the list state changes params
func (o *ListStateChangesParams) WithProviderID(providerID *string) *ListStateChangesParams {
	o.SetProviderID(providerID)
	return o
}

// SetProviderID adds the providerId to the list state changes params
func (o *ListStateChangesParams) SetProviderID(providerID *string) {
	o.ProviderID = providerID
}

// WithStartTime adds the startTime to the list state changes params
func (o *ListStateChangesParams) WithStartTime(startTime *string) *ListStateChangesParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the list state changes params
func (o *ListStateChangesParams) SetStartTime(startTime *string) {
	o.StartTime = startTime
}

// WithState adds the state to the list state changes params
func (o *ListStateChangesParams) WithState(state *string) *ListStateChangesParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the list state changes params
func (o *ListStateChangesParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *ListStateChangesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClientAddress != nil {

		// query param clientAddress
		var qrClientAddress string

		if o.ClientAddress != nil {
			qrClientAddress = *o.ClientAddress
		}
		qClientAddress := qrClientAddress
		if qClientAddress != "" {

			if err := r.SetQueryParam("clientAddress", qClientAddress); err != nil {
				return err
			}
		}
	}

	if o.DealID != nil {

		// query param dealId
		var qrDealID string

		if o.DealID != nil {
			qrDealID = *o.DealID
		}
		qDealID := qrDealID
		if qDealID != "" {

			if err := r.SetQueryParam("dealId", qDealID); err != nil {
				return err
			}
		}
	}

	if o.EndTime != nil {

		// query param endTime
		var qrEndTime string

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime
		if qEndTime != "" {

			if err := r.SetQueryParam("endTime", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Order != nil {

		// query param order
		var qrOrder string

		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {

			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// query param orderBy
		var qrOrderBy string

		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {

			if err := r.SetQueryParam("orderBy", qOrderBy); err != nil {
				return err
			}
		}
	}

	if o.ProviderID != nil {

		// query param providerId
		var qrProviderID string

		if o.ProviderID != nil {
			qrProviderID = *o.ProviderID
		}
		qProviderID := qrProviderID
		if qProviderID != "" {

			if err := r.SetQueryParam("providerId", qProviderID); err != nil {
				return err
			}
		}
	}

	if o.StartTime != nil {

		// query param startTime
		var qrStartTime string

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := qrStartTime
		if qStartTime != "" {

			if err := r.SetQueryParam("startTime", qStartTime); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
