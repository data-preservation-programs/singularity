// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelWalletType model wallet type
//
// swagger:model model.WalletType
type ModelWalletType string

func NewModelWalletType(value ModelWalletType) *ModelWalletType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelWalletType.
func (m ModelWalletType) Pointer() *ModelWalletType {
	return &m
}

const (

	// ModelWalletTypeUserWallet captures enum value "UserWallet"
	ModelWalletTypeUserWallet ModelWalletType = "UserWallet"

	// ModelWalletTypeSPWallet captures enum value "SPWallet"
	ModelWalletTypeSPWallet ModelWalletType = "SPWallet"
)

// for schema
var modelWalletTypeEnum []interface{}

func init() {
	var res []ModelWalletType
	if err := json.Unmarshal([]byte(`["UserWallet","SPWallet"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelWalletTypeEnum = append(modelWalletTypeEnum, v)
	}
}

func (m ModelWalletType) validateModelWalletTypeEnum(path, location string, value ModelWalletType) error {
	if err := validate.EnumCase(path, location, value, modelWalletTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this model wallet type
func (m ModelWalletType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelWalletTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this model wallet type based on context it is used
func (m ModelWalletType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
