// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"net/url"
	"strconv"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelPreparation model preparation
//
// swagger:model model.Preparation
type ModelPreparation struct {

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// Deal configuration (encapsulated in DealConfig struct)
	DealConfig struct {
		ModelDealConfig
	} `json:"dealConfig,omitempty"`

	// Optional deal template to use
	DealTemplateID int64 `json:"dealTemplateId,omitempty"`

	// DeleteAfterExport is a flag that indicates whether the source files should be deleted after export.
	DeleteAfterExport bool `json:"deleteAfterExport,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// max size
	MaxSize int64 `json:"maxSize,omitempty"`

	// Minimum piece size for the preparation, applies only to DAG and remainder pieces
	MinPieceSize int64 `json:"minPieceSize,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// no dag
	NoDag bool `json:"noDag,omitempty"`

	// no inline
	NoInline bool `json:"noInline,omitempty"`

	// output storages
	OutputStorages []*ModelStorage `json:"outputStorages"`

	// piece size
	PieceSize int64 `json:"pieceSize,omitempty"`

	// source storages
	SourceStorages []*ModelStorage `json:"sourceStorages"`

	// Enable storage provider validation
	SpValidation bool `json:"spValidation,omitempty"`

	// updated at
	UpdatedAt string `json:"updatedAt,omitempty"`

	// Enable wallet balance validation
	WalletValidation bool `json:"walletValidation,omitempty"`
}

// Validate validates this model preparation
func (m *ModelPreparation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDealConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputStorages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceStorages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSPAndWalletFlags(); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreparationConsistency(); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// validateURLTemplate validates that the URL template is properly formatted
func (m *ModelPreparation) validateURLTemplate(template string) error {
	// Check if template contains required placeholders
	if !strings.Contains(template, "{PIECE_CID}") {
		return errors.New(400, "dealURLTemplate must contain {PIECE_CID} placeholder")
	}

	// Try to parse the URL with a sample piece CID
	sampleURL := strings.ReplaceAll(template, "{PIECE_CID}", "baga6ea4seaqbase32cid")
	if _, err := url.Parse(sampleURL); err != nil {
		return errors.New(400, fmt.Sprintf("dealURLTemplate is not a valid URL template: %v", err))
	}

	return nil
}

// validateSPAndWalletFlags validates the SP and wallet validation flags
func (m *ModelPreparation) validateSPAndWalletFlags() error {
	// If auto-create deals is enabled, validate that validation flags make sense
	if m.DealConfig.AutoCreateDeals {
		// SP validation is recommended when auto-creating deals
		if !m.SpValidation {
			// This is a warning, not an error - just log or handle as needed
			// Could return a warning or just continue
		}

		// Wallet validation is recommended for verified deals
		if m.DealConfig.DealVerified && !m.WalletValidation {
			// This is a warning, not an error - just log or handle as needed
			// Could return a warning or just continue
		}
	}

	return nil
}

// validatePreparationConsistency validates overall preparation consistency
func (m *ModelPreparation) validatePreparationConsistency() error {
	// Validate piece size constraints
	if m.MinPieceSize > 0 && m.PieceSize > 0 {
		if m.MinPieceSize > m.PieceSize {
			return errors.New(400, "minPieceSize cannot be greater than pieceSize")
		}
	}

	// Validate max size constraint
	if m.MaxSize > 0 && m.PieceSize > 0 {
		if m.MaxSize < m.PieceSize {
			return errors.New(400, "maxSize cannot be less than pieceSize")
		}
	}

	// Validate storage requirements
	if len(m.SourceStorages) == 0 {
		return errors.New(400, "at least one source storage must be specified")
	}

	if len(m.OutputStorages) == 0 {
		return errors.New(400, "at least one output storage must be specified")
	}

	return nil
}

func (m *ModelPreparation) validateDealConfig(formats strfmt.Registry) error {
	// Check if both DealTemplateID and DealConfig are provided
	if m.DealTemplateID > 0 && !swag.IsZero(m.DealConfig) {
		// Check if any deal config fields are set when using a template
		if m.DealConfig.AutoCreateDeals ||
			m.DealConfig.DealDuration > 0 ||
			m.DealConfig.DealStartDelay > 0 ||
			m.DealConfig.DealProvider != "" ||
			m.DealConfig.DealPricePerDeal > 0 ||
			m.DealConfig.DealPricePerGb > 0 ||
			m.DealConfig.DealPricePerGbEpoch > 0 ||
			m.DealConfig.DealURLTemplate != "" ||
			m.DealConfig.DealHTTPHeaders != nil {
			return errors.New(400, "cannot specify both deal template and deal configuration fields")
		}
	}

	// If no deal template is specified and auto-create deals is enabled, validate required fields
	if m.DealTemplateID == 0 && m.DealConfig.AutoCreateDeals {
		// Validate required fields for auto deal creation
		if m.DealConfig.DealProvider == "" {
			return errors.Required("dealConfig.dealProvider", "body", nil)
		}

		// Validate storage provider format (should start with 'f0' or 't0')
		if !strings.HasPrefix(m.DealConfig.DealProvider, "f0") && !strings.HasPrefix(m.DealConfig.DealProvider, "t0") {
			return errors.New(400, "dealProvider must be a valid storage provider ID (e.g., f01234 or t01234)")
		}

		// Validate deal duration
		if m.DealConfig.DealDuration <= 0 {
			return errors.New(400, "dealDuration must be positive when auto-creating deals")
		}

		// Validate deal start delay
		if m.DealConfig.DealStartDelay < 0 {
			return errors.New(400, "dealStartDelay cannot be negative")
		}

		// Validate pricing - at least one pricing method should be specified
		if m.DealConfig.DealPricePerDeal == 0 && m.DealConfig.DealPricePerGb == 0 && m.DealConfig.DealPricePerGbEpoch == 0 {
			return errors.New(400, "at least one pricing method must be specified (dealPricePerDeal, dealPricePerGb, or dealPricePerGbEpoch)")
		}

		// Validate URL template if provided
		if m.DealConfig.DealURLTemplate != "" {
			if err := m.validateURLTemplate(m.DealConfig.DealURLTemplate); err != nil {
				return err
			}
		}
	}

	// Call the embedded DealConfig validation if it exists
	if err := m.DealConfig.ModelDealConfig.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *ModelPreparation) validateOutputStorages(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputStorages) { // not required
		return nil
	}

	for i := 0; i < len(m.OutputStorages); i++ {
		if swag.IsZero(m.OutputStorages[i]) { // not required
			continue
		}

		if m.OutputStorages[i] != nil {
			if err := m.OutputStorages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputStorages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outputStorages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelPreparation) validateSourceStorages(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceStorages) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceStorages); i++ {
		if swag.IsZero(m.SourceStorages[i]) { // not required
			continue
		}

		if m.SourceStorages[i] != nil {
			if err := m.SourceStorages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sourceStorages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sourceStorages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this model preparation based on the context it is used
func (m *ModelPreparation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDealConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputStorages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceStorages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelPreparation) contextValidateDealConfig(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ModelPreparation) contextValidateOutputStorages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OutputStorages); i++ {

		if m.OutputStorages[i] != nil {

			if swag.IsZero(m.OutputStorages[i]) { // not required
				return nil
			}

			if err := m.OutputStorages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputStorages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outputStorages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelPreparation) contextValidateSourceStorages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SourceStorages); i++ {

		if m.SourceStorages[i] != nil {

			if swag.IsZero(m.SourceStorages[i]) { // not required
				return nil
			}

			if err := m.SourceStorages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sourceStorages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sourceStorages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelPreparation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelPreparation) UnmarshalBinary(b []byte) error {
	var res ModelPreparation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
