// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelPreparation model preparation
//
// swagger:model model.Preparation
type ModelPreparation struct {

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// DeleteAfterExport is a flag that indicates whether the source files should be deleted after export.
	DeleteAfterExport bool `json:"deleteAfterExport,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// max size
	MaxSize int64 `json:"maxSize,omitempty"`

	// Minimum piece size for the preparation, applies only to DAG and remainder pieces
	MinPieceSize int64 `json:"minPieceSize,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// no dag
	NoDag bool `json:"noDag,omitempty"`

	// no inline
	NoInline bool `json:"noInline,omitempty"`

	// output storages
	OutputStorages []*ModelStorage `json:"outputStorages"`

	// piece size
	PieceSize int64 `json:"pieceSize,omitempty"`

	// source storages
	SourceStorages []*ModelStorage `json:"sourceStorages"`

	// updated at
	UpdatedAt string `json:"updatedAt,omitempty"`
}

// Validate validates this model preparation
func (m *ModelPreparation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOutputStorages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceStorages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelPreparation) validateOutputStorages(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputStorages) { // not required
		return nil
	}

	for i := 0; i < len(m.OutputStorages); i++ {
		if swag.IsZero(m.OutputStorages[i]) { // not required
			continue
		}

		if m.OutputStorages[i] != nil {
			if err := m.OutputStorages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputStorages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outputStorages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelPreparation) validateSourceStorages(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceStorages) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceStorages); i++ {
		if swag.IsZero(m.SourceStorages[i]) { // not required
			continue
		}

		if m.SourceStorages[i] != nil {
			if err := m.SourceStorages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sourceStorages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sourceStorages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this model preparation based on the context it is used
func (m *ModelPreparation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOutputStorages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceStorages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelPreparation) contextValidateOutputStorages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OutputStorages); i++ {

		if m.OutputStorages[i] != nil {

			if swag.IsZero(m.OutputStorages[i]) { // not required
				return nil
			}

			if err := m.OutputStorages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputStorages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outputStorages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelPreparation) contextValidateSourceStorages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SourceStorages); i++ {

		if m.SourceStorages[i] != nil {

			if swag.IsZero(m.SourceStorages[i]) { // not required
				return nil
			}

			if err := m.SourceStorages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sourceStorages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sourceStorages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelPreparation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelPreparation) UnmarshalBinary(b []byte) error {
	var res ModelPreparation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
