// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelErrorLog model error log
//
// swagger:model model.ErrorLog
type ModelErrorLog struct {

	// Component that generated the error (onboard, deal_schedule, etc.)
	Component string `json:"component,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// ID of the associated entity
	EntityID string `json:"entityId,omitempty"`

	// Type of entity (deal, preparation, schedule, etc.)
	EntityType string `json:"entityType,omitempty"`

	// Type of event (creation, processing, error, etc.)
	EventType string `json:"eventType,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// Error level (info, warning, error, critical)
	Level struct {
		ModelErrorLevel
	} `json:"level,omitempty"`

	// Human-readable error message
	Message string `json:"message,omitempty"`

	// Additional context as JSON
	Metadata struct {
		ModelConfigMap
	} `json:"metadata,omitempty"`

	// Optional session identifier
	SessionID string `json:"sessionId,omitempty"`

	// Stack trace if available
	StackTrace string `json:"stackTrace,omitempty"`

	// Optional user identifier
	UserID string `json:"userId,omitempty"`
}

// Validate validates this model error log
func (m *ModelErrorLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelErrorLog) validateLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.Level) { // not required
		return nil
	}

	return nil
}

func (m *ModelErrorLog) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this model error log based on the context it is used
func (m *ModelErrorLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLevel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelErrorLog) contextValidateLevel(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ModelErrorLog) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *ModelErrorLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelErrorLog) UnmarshalBinary(b []byte) error {
	var res ModelErrorLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
