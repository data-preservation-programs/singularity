// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelSchedule model schedule
//
// swagger:model model.Schedule
type ModelSchedule struct {

	// allowed piece cids
	AllowedPieceCids []string `json:"allowedPieceCids"`

	// announce to ipni
	AnnounceToIpni bool `json:"announceToIpni,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// dataset Id
	DatasetID int64 `json:"datasetId,omitempty"`

	// duration
	Duration int64 `json:"duration,omitempty"`

	// error message
	ErrorMessage string `json:"errorMessage,omitempty"`

	// http headers
	HTTPHeaders []string `json:"httpHeaders"`

	// id
	ID int64 `json:"id,omitempty"`

	// keep unsealed
	KeepUnsealed bool `json:"keepUnsealed,omitempty"`

	// max pending deal number
	MaxPendingDealNumber int64 `json:"maxPendingDealNumber,omitempty"`

	// max pending deal size
	MaxPendingDealSize int64 `json:"maxPendingDealSize,omitempty"`

	// notes
	Notes string `json:"notes,omitempty"`

	// price per deal
	PricePerDeal float64 `json:"pricePerDeal,omitempty"`

	// price per gb
	PricePerGb float64 `json:"pricePerGb,omitempty"`

	// price per gb epoch
	PricePerGbEpoch float64 `json:"pricePerGbEpoch,omitempty"`

	// provider
	Provider string `json:"provider,omitempty"`

	// schedule cron
	ScheduleCron string `json:"scheduleCron,omitempty"`

	// schedule cron perpetual
	ScheduleCronPerpetual bool `json:"scheduleCronPerpetual,omitempty"`

	// schedule deal number
	ScheduleDealNumber int64 `json:"scheduleDealNumber,omitempty"`

	// schedule deal size
	ScheduleDealSize int64 `json:"scheduleDealSize,omitempty"`

	// start delay
	StartDelay int64 `json:"startDelay,omitempty"`

	// state
	State ModelScheduleState `json:"state,omitempty"`

	// total deal number
	TotalDealNumber int64 `json:"totalDealNumber,omitempty"`

	// total deal size
	TotalDealSize int64 `json:"totalDealSize,omitempty"`

	// updated at
	UpdatedAt string `json:"updatedAt,omitempty"`

	// url template
	URLTemplate string `json:"urlTemplate,omitempty"`

	// verified
	Verified bool `json:"verified,omitempty"`
}

// Validate validates this model schedule
func (m *ModelSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelSchedule) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("state")
		}
		return err
	}

	return nil
}

// ContextValidate validate this model schedule based on the context it is used
func (m *ModelSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelSchedule) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("state")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelSchedule) UnmarshalBinary(b []byte) error {
	var res ModelSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
