// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelDealStateChange model deal state change
//
// swagger:model model.DealStateChange
type ModelDealStateChange struct {

	// Client wallet address
	ClientAddress string `json:"clientAddress,omitempty"`

	// Internal singularity deal ID
	DealID int64 `json:"dealId,omitempty"`

	// Filecoin epoch when change occurred
	EpochHeight int64 `json:"epochHeight,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// Additional metadata as JSON
	Metadata string `json:"metadata,omitempty"`

	// New deal state
	NewState struct {
		ModelDealState
	} `json:"newState,omitempty"`

	// Previous deal state (nullable for initial state)
	PreviousState struct {
		ModelDealState
	} `json:"previousState,omitempty"`

	// Storage provider ID
	ProviderID string `json:"providerId,omitempty"`

	// Storage provider sector ID
	SectorID string `json:"sectorId,omitempty"`

	// timestamp
	Timestamp string `json:"timestamp,omitempty"`
}

// Validate validates this model deal state change
func (m *ModelDealStateChange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNewState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelDealStateChange) validateNewState(formats strfmt.Registry) error {
	if swag.IsZero(m.NewState) { // not required
		return nil
	}

	return nil
}

func (m *ModelDealStateChange) validatePreviousState(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousState) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this model deal state change based on the context it is used
func (m *ModelDealStateChange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNewState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreviousState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelDealStateChange) contextValidateNewState(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ModelDealStateChange) contextValidatePreviousState(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *ModelDealStateChange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelDealStateChange) UnmarshalBinary(b []byte) error {
	var res ModelDealStateChange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
