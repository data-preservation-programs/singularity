// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelDeal model deal
//
// swagger:model model.Deal
type ModelDeal struct {

	// client actor Id
	ClientActorID string `json:"clientActorId,omitempty"`

	// client Id
	ClientID int64 `json:"clientId,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// deal Id
	DealID int64 `json:"dealId,omitempty"`

	// end epoch
	EndEpoch int64 `json:"endEpoch,omitempty"`

	// error message
	ErrorMessage string `json:"errorMessage,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// LastVerifiedAt is the last time the deal was verified as active by the tracker
	LastVerifiedAt string `json:"lastVerifiedAt,omitempty"`

	// piece cid
	PieceCid string `json:"pieceCid,omitempty"`

	// piece size
	PieceSize int64 `json:"pieceSize,omitempty"`

	// price
	Price string `json:"price,omitempty"`

	// proposal Id
	ProposalID string `json:"proposalId,omitempty"`

	// provider
	Provider string `json:"provider,omitempty"`

	// Associations
	ScheduleID int64 `json:"scheduleId,omitempty"`

	// sector start epoch
	SectorStartEpoch int64 `json:"sectorStartEpoch,omitempty"`

	// start epoch
	StartEpoch int64 `json:"startEpoch,omitempty"`

	// state
	State ModelDealState `json:"state,omitempty"`

	// updated at
	UpdatedAt string `json:"updatedAt,omitempty"`

	// verified
	Verified bool `json:"verified,omitempty"`
}

// Validate validates this model deal
func (m *ModelDeal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelDeal) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("state")
		}
		return err
	}

	return nil
}

// ContextValidate validate this model deal based on the context it is used
func (m *ModelDeal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelDeal) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("state")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelDeal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelDeal) UnmarshalBinary(b []byte) error {
	var res ModelDeal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
