// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelDealConfig model deal config
//
// swagger:model model.DealConfig
type ModelDealConfig struct {

	// AutoCreateDeals enables automatic deal creation after preparation completes
	AutoCreateDeals bool `json:"autoCreateDeals,omitempty"`

	// DealAnnounceToIpni indicates whether to announce to IPNI
	DealAnnounceToIpni bool `json:"dealAnnounceToIpni,omitempty"`

	// DealDuration specifies the deal duration (time.Duration for backward compatibility)
	DealDuration int64 `json:"dealDuration,omitempty"`

	// DealHTTPHeaders contains HTTP headers for deals
	DealHTTPHeaders struct {
		ModelConfigMap
	} `json:"dealHttpHeaders,omitempty"`

	// DealKeepUnsealed indicates whether to keep unsealed copy
	DealKeepUnsealed bool `json:"dealKeepUnsealed,omitempty"`

	// DealPricePerDeal specifies the price in FIL per deal
	DealPricePerDeal float64 `json:"dealPricePerDeal,omitempty"`

	// DealPricePerGb specifies the price in FIL per GiB
	DealPricePerGb float64 `json:"dealPricePerGb,omitempty"`

	// DealPricePerGbEpoch specifies the price in FIL per GiB per epoch
	DealPricePerGbEpoch float64 `json:"dealPricePerGbEpoch,omitempty"`

	// DealProvider specifies the Storage Provider ID for deals
	DealProvider string `json:"dealProvider,omitempty"`

	// DealStartDelay specifies the deal start delay (time.Duration for backward compatibility)
	DealStartDelay int64 `json:"dealStartDelay,omitempty"`

	// DealTemplate specifies the deal template name or ID to use (optional)
	DealTemplate string `json:"dealTemplate,omitempty"`

	// DealURLTemplate specifies the URL template for deals
	DealURLTemplate string `json:"dealUrlTemplate,omitempty"`

	// DealVerified indicates whether deals should be verified
	DealVerified bool `json:"dealVerified,omitempty"`
}

// Validate validates this model deal config
func (m *ModelDealConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDealHTTPHeaders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelDealConfig) validateDealHTTPHeaders(formats strfmt.Registry) error {
	if swag.IsZero(m.DealHTTPHeaders) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this model deal config based on the context it is used
func (m *ModelDealConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDealHTTPHeaders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelDealConfig) contextValidateDealHTTPHeaders(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *ModelDealConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelDealConfig) UnmarshalBinary(b []byte) error {
	var res ModelDealConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
