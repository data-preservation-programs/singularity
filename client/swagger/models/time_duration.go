// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TimeDuration time duration
//
// swagger:model time.Duration
type TimeDuration string

func NewTimeDuration(value TimeDuration) *TimeDuration {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TimeDuration.
func (m TimeDuration) Pointer() *TimeDuration {
	return &m
}

const (

	// TimeDurationNr1ns captures enum value "1ns"
	TimeDurationNr1ns TimeDuration = "1ns"

	// TimeDurationNr1us captures enum value "1us"
	TimeDurationNr1us TimeDuration = "1us"

	// TimeDurationNr1ms captures enum value "1ms"
	TimeDurationNr1ms TimeDuration = "1ms"

	// TimeDurationNr1s captures enum value "1s"
	TimeDurationNr1s TimeDuration = "1s"

	// TimeDurationNr1m captures enum value "1m"
	TimeDurationNr1m TimeDuration = "1m"

	// TimeDurationNr1h captures enum value "1h"
	TimeDurationNr1h TimeDuration = "1h"

	// TimeDurationNr24h captures enum value "24h"
	TimeDurationNr24h TimeDuration = "24h"

	// TimeDurationNr168h captures enum value "168h"
	TimeDurationNr168h TimeDuration = "168h"
)

// for schema
var timeDurationEnum []interface{}

func init() {
	var res []TimeDuration
	if err := json.Unmarshal([]byte(`["1ns","1us","1ms","1s","1m","1h","24h","168h"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timeDurationEnum = append(timeDurationEnum, v)
	}
}

func (m TimeDuration) validateTimeDurationEnum(path, location string, value TimeDuration) error {
	if err := validate.EnumCase(path, location, value, timeDurationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this time duration
func (m TimeDuration) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTimeDurationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this time duration based on context it is used
func (m TimeDuration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
