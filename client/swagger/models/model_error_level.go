// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelErrorLevel model error level
//
// swagger:model model.ErrorLevel
type ModelErrorLevel string

func NewModelErrorLevel(value ModelErrorLevel) *ModelErrorLevel {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelErrorLevel.
func (m ModelErrorLevel) Pointer() *ModelErrorLevel {
	return &m
}

const (

	// ModelErrorLevelInfo captures enum value "info"
	ModelErrorLevelInfo ModelErrorLevel = "info"

	// ModelErrorLevelWarning captures enum value "warning"
	ModelErrorLevelWarning ModelErrorLevel = "warning"

	// ModelErrorLevelError captures enum value "error"
	ModelErrorLevelError ModelErrorLevel = "error"

	// ModelErrorLevelCritical captures enum value "critical"
	ModelErrorLevelCritical ModelErrorLevel = "critical"
)

// for schema
var modelErrorLevelEnum []interface{}

func init() {
	var res []ModelErrorLevel
	if err := json.Unmarshal([]byte(`["info","warning","error","critical"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelErrorLevelEnum = append(modelErrorLevelEnum, v)
	}
}

func (m ModelErrorLevel) validateModelErrorLevelEnum(path, location string, value ModelErrorLevel) error {
	if err := validate.EnumCase(path, location, value, modelErrorLevelEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this model error level
func (m ModelErrorLevel) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelErrorLevelEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this model error level based on context it is used
func (m ModelErrorLevel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
