// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DealtemplateUpdateRequest dealtemplate update request
//
// swagger:model dealtemplate.UpdateRequest
type DealtemplateUpdateRequest struct {

	// deal allowed piece cids
	DealAllowedPieceCids []string `json:"dealAllowedPieceCids"`

	// deal announce to ipni
	DealAnnounceToIpni bool `json:"dealAnnounceToIpni,omitempty"`

	// deal duration
	DealDuration TimeDuration `json:"dealDuration,omitempty"`

	// deal force
	DealForce bool `json:"dealForce,omitempty"`

	// deal Http headers
	DealHTTPHeaders ModelConfigMap `json:"dealHttpHeaders,omitempty"`

	// deal keep unsealed
	DealKeepUnsealed bool `json:"dealKeepUnsealed,omitempty"`

	// deal notes
	DealNotes string `json:"dealNotes,omitempty"`

	// deal price per deal
	DealPricePerDeal float64 `json:"dealPricePerDeal,omitempty"`

	// deal price per gb
	DealPricePerGb float64 `json:"dealPricePerGb,omitempty"`

	// deal price per gb epoch
	DealPricePerGbEpoch float64 `json:"dealPricePerGbEpoch,omitempty"`

	// deal provider
	DealProvider string `json:"dealProvider,omitempty"`

	// deal start delay
	DealStartDelay TimeDuration `json:"dealStartDelay,omitempty"`

	// deal Url template
	DealURLTemplate string `json:"dealUrlTemplate,omitempty"`

	// deal verified
	DealVerified bool `json:"dealVerified,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// HTTP headers as string slice
	HTTPHeaders []string `json:"httpHeaders"`

	// max pending deal number
	MaxPendingDealNumber int64 `json:"maxPendingDealNumber,omitempty"`

	// max pending deal size
	MaxPendingDealSize string `json:"maxPendingDealSize,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// New scheduling fields
	ScheduleCron string `json:"scheduleCron,omitempty"`

	// schedule deal number
	ScheduleDealNumber int64 `json:"scheduleDealNumber,omitempty"`

	// schedule deal size
	ScheduleDealSize string `json:"scheduleDealSize,omitempty"`

	// New restriction fields
	TotalDealNumber int64 `json:"totalDealNumber,omitempty"`

	// total deal size
	TotalDealSize string `json:"totalDealSize,omitempty"`
}

// Validate validates this dealtemplate update request
func (m *DealtemplateUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDealDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDealHTTPHeaders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDealStartDelay(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DealtemplateUpdateRequest) validateDealDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.DealDuration) { // not required
		return nil
	}

	if err := m.DealDuration.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dealDuration")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dealDuration")
		}
		return err
	}

	return nil
}

func (m *DealtemplateUpdateRequest) validateDealHTTPHeaders(formats strfmt.Registry) error {
	if swag.IsZero(m.DealHTTPHeaders) { // not required
		return nil
	}

	if m.DealHTTPHeaders != nil {
		if err := m.DealHTTPHeaders.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dealHttpHeaders")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dealHttpHeaders")
			}
			return err
		}
	}

	return nil
}

func (m *DealtemplateUpdateRequest) validateDealStartDelay(formats strfmt.Registry) error {
	if swag.IsZero(m.DealStartDelay) { // not required
		return nil
	}

	if err := m.DealStartDelay.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dealStartDelay")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dealStartDelay")
		}
		return err
	}

	return nil
}

// ContextValidate validate this dealtemplate update request based on the context it is used
func (m *DealtemplateUpdateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDealDuration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDealHTTPHeaders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDealStartDelay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DealtemplateUpdateRequest) contextValidateDealDuration(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.DealDuration) { // not required
		return nil
	}

	if err := m.DealDuration.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dealDuration")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dealDuration")
		}
		return err
	}

	return nil
}

func (m *DealtemplateUpdateRequest) contextValidateDealHTTPHeaders(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.DealHTTPHeaders) { // not required
		return nil
	}

	if err := m.DealHTTPHeaders.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dealHttpHeaders")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dealHttpHeaders")
		}
		return err
	}

	return nil
}

func (m *DealtemplateUpdateRequest) contextValidateDealStartDelay(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.DealStartDelay) { // not required
		return nil
	}

	if err := m.DealStartDelay.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dealStartDelay")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dealStartDelay")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DealtemplateUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DealtemplateUpdateRequest) UnmarshalBinary(b []byte) error {
	var res DealtemplateUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
