// Code generated by go-swagger; DO NOT EDIT.

package wallet_association

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// ListAttachedWalletsReader is a Reader for the ListAttachedWallets structure.
type ListAttachedWalletsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAttachedWalletsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListAttachedWalletsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListAttachedWalletsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListAttachedWalletsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /preparation/{id}/wallet] ListAttachedWallets", response, response.Code())
	}
}

// NewListAttachedWalletsOK creates a ListAttachedWalletsOK with default headers values
func NewListAttachedWalletsOK() *ListAttachedWalletsOK {
	return &ListAttachedWalletsOK{}
}

/*
ListAttachedWalletsOK describes a response with status code 200, with default header values.

OK
*/
type ListAttachedWalletsOK struct {
	Payload []*models.ModelWallet
}

// IsSuccess returns true when this list attached wallets o k response has a 2xx status code
func (o *ListAttachedWalletsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list attached wallets o k response has a 3xx status code
func (o *ListAttachedWalletsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list attached wallets o k response has a 4xx status code
func (o *ListAttachedWalletsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list attached wallets o k response has a 5xx status code
func (o *ListAttachedWalletsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list attached wallets o k response a status code equal to that given
func (o *ListAttachedWalletsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list attached wallets o k response
func (o *ListAttachedWalletsOK) Code() int {
	return 200
}

func (o *ListAttachedWalletsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /preparation/{id}/wallet][%d] listAttachedWalletsOK %s", 200, payload)
}

func (o *ListAttachedWalletsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /preparation/{id}/wallet][%d] listAttachedWalletsOK %s", 200, payload)
}

func (o *ListAttachedWalletsOK) GetPayload() []*models.ModelWallet {
	return o.Payload
}

func (o *ListAttachedWalletsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAttachedWalletsBadRequest creates a ListAttachedWalletsBadRequest with default headers values
func NewListAttachedWalletsBadRequest() *ListAttachedWalletsBadRequest {
	return &ListAttachedWalletsBadRequest{}
}

/*
ListAttachedWalletsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ListAttachedWalletsBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this list attached wallets bad request response has a 2xx status code
func (o *ListAttachedWalletsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list attached wallets bad request response has a 3xx status code
func (o *ListAttachedWalletsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list attached wallets bad request response has a 4xx status code
func (o *ListAttachedWalletsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list attached wallets bad request response has a 5xx status code
func (o *ListAttachedWalletsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list attached wallets bad request response a status code equal to that given
func (o *ListAttachedWalletsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list attached wallets bad request response
func (o *ListAttachedWalletsBadRequest) Code() int {
	return 400
}

func (o *ListAttachedWalletsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /preparation/{id}/wallet][%d] listAttachedWalletsBadRequest %s", 400, payload)
}

func (o *ListAttachedWalletsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /preparation/{id}/wallet][%d] listAttachedWalletsBadRequest %s", 400, payload)
}

func (o *ListAttachedWalletsBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *ListAttachedWalletsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAttachedWalletsInternalServerError creates a ListAttachedWalletsInternalServerError with default headers values
func NewListAttachedWalletsInternalServerError() *ListAttachedWalletsInternalServerError {
	return &ListAttachedWalletsInternalServerError{}
}

/*
ListAttachedWalletsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ListAttachedWalletsInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this list attached wallets internal server error response has a 2xx status code
func (o *ListAttachedWalletsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list attached wallets internal server error response has a 3xx status code
func (o *ListAttachedWalletsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list attached wallets internal server error response has a 4xx status code
func (o *ListAttachedWalletsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list attached wallets internal server error response has a 5xx status code
func (o *ListAttachedWalletsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list attached wallets internal server error response a status code equal to that given
func (o *ListAttachedWalletsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list attached wallets internal server error response
func (o *ListAttachedWalletsInternalServerError) Code() int {
	return 500
}

func (o *ListAttachedWalletsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /preparation/{id}/wallet][%d] listAttachedWalletsInternalServerError %s", 500, payload)
}

func (o *ListAttachedWalletsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /preparation/{id}/wallet][%d] listAttachedWalletsInternalServerError %s", 500, payload)
}

func (o *ListAttachedWalletsInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *ListAttachedWalletsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
