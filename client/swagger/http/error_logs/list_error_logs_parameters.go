// Code generated by go-swagger; DO NOT EDIT.

package error_logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListErrorLogsParams creates a new ListErrorLogsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListErrorLogsParams() *ListErrorLogsParams {
	return &ListErrorLogsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListErrorLogsParamsWithTimeout creates a new ListErrorLogsParams object
// with the ability to set a timeout on a request.
func NewListErrorLogsParamsWithTimeout(timeout time.Duration) *ListErrorLogsParams {
	return &ListErrorLogsParams{
		timeout: timeout,
	}
}

// NewListErrorLogsParamsWithContext creates a new ListErrorLogsParams object
// with the ability to set a context for a request.
func NewListErrorLogsParamsWithContext(ctx context.Context) *ListErrorLogsParams {
	return &ListErrorLogsParams{
		Context: ctx,
	}
}

// NewListErrorLogsParamsWithHTTPClient creates a new ListErrorLogsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListErrorLogsParamsWithHTTPClient(client *http.Client) *ListErrorLogsParams {
	return &ListErrorLogsParams{
		HTTPClient: client,
	}
}

/*
ListErrorLogsParams contains all the parameters to send to the API endpoint

	for the list error logs operation.

	Typically these are written to a http.Request.
*/
type ListErrorLogsParams struct {

	/* Component.

	   Filter by component (e.g., onboard, deal_schedule)
	*/
	Component *string

	/* EndTime.

	   Filter logs before this time (RFC3339 format)
	*/
	EndTime *string

	/* EntityID.

	   Filter by entity ID
	*/
	EntityID *string

	/* EntityType.

	   Filter by entity type (e.g., deal, preparation, schedule)
	*/
	EntityType *string

	/* EventType.

	   Filter by event type
	*/
	EventType *string

	/* Level.

	   Filter by error level (info, warning, error, critical)
	*/
	Level *string

	/* Limit.

	   Maximum number of logs to return (default: 50, max: 1000)
	*/
	Limit *int64

	/* Offset.

	   Number of logs to skip (default: 0)
	*/
	Offset *int64

	/* StartTime.

	   Filter logs after this time (RFC3339 format)
	*/
	StartTime *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list error logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListErrorLogsParams) WithDefaults() *ListErrorLogsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list error logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListErrorLogsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list error logs params
func (o *ListErrorLogsParams) WithTimeout(timeout time.Duration) *ListErrorLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list error logs params
func (o *ListErrorLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list error logs params
func (o *ListErrorLogsParams) WithContext(ctx context.Context) *ListErrorLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list error logs params
func (o *ListErrorLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list error logs params
func (o *ListErrorLogsParams) WithHTTPClient(client *http.Client) *ListErrorLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list error logs params
func (o *ListErrorLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithComponent adds the component to the list error logs params
func (o *ListErrorLogsParams) WithComponent(component *string) *ListErrorLogsParams {
	o.SetComponent(component)
	return o
}

// SetComponent adds the component to the list error logs params
func (o *ListErrorLogsParams) SetComponent(component *string) {
	o.Component = component
}

// WithEndTime adds the endTime to the list error logs params
func (o *ListErrorLogsParams) WithEndTime(endTime *string) *ListErrorLogsParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the list error logs params
func (o *ListErrorLogsParams) SetEndTime(endTime *string) {
	o.EndTime = endTime
}

// WithEntityID adds the entityID to the list error logs params
func (o *ListErrorLogsParams) WithEntityID(entityID *string) *ListErrorLogsParams {
	o.SetEntityID(entityID)
	return o
}

// SetEntityID adds the entityId to the list error logs params
func (o *ListErrorLogsParams) SetEntityID(entityID *string) {
	o.EntityID = entityID
}

// WithEntityType adds the entityType to the list error logs params
func (o *ListErrorLogsParams) WithEntityType(entityType *string) *ListErrorLogsParams {
	o.SetEntityType(entityType)
	return o
}

// SetEntityType adds the entityType to the list error logs params
func (o *ListErrorLogsParams) SetEntityType(entityType *string) {
	o.EntityType = entityType
}

// WithEventType adds the eventType to the list error logs params
func (o *ListErrorLogsParams) WithEventType(eventType *string) *ListErrorLogsParams {
	o.SetEventType(eventType)
	return o
}

// SetEventType adds the eventType to the list error logs params
func (o *ListErrorLogsParams) SetEventType(eventType *string) {
	o.EventType = eventType
}

// WithLevel adds the level to the list error logs params
func (o *ListErrorLogsParams) WithLevel(level *string) *ListErrorLogsParams {
	o.SetLevel(level)
	return o
}

// SetLevel adds the level to the list error logs params
func (o *ListErrorLogsParams) SetLevel(level *string) {
	o.Level = level
}

// WithLimit adds the limit to the list error logs params
func (o *ListErrorLogsParams) WithLimit(limit *int64) *ListErrorLogsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list error logs params
func (o *ListErrorLogsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the list error logs params
func (o *ListErrorLogsParams) WithOffset(offset *int64) *ListErrorLogsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the list error logs params
func (o *ListErrorLogsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithStartTime adds the startTime to the list error logs params
func (o *ListErrorLogsParams) WithStartTime(startTime *string) *ListErrorLogsParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the list error logs params
func (o *ListErrorLogsParams) SetStartTime(startTime *string) {
	o.StartTime = startTime
}

// WriteToRequest writes these params to a swagger request
func (o *ListErrorLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Component != nil {

		// query param component
		var qrComponent string

		if o.Component != nil {
			qrComponent = *o.Component
		}
		qComponent := qrComponent
		if qComponent != "" {

			if err := r.SetQueryParam("component", qComponent); err != nil {
				return err
			}
		}
	}

	if o.EndTime != nil {

		// query param end_time
		var qrEndTime string

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime
		if qEndTime != "" {

			if err := r.SetQueryParam("end_time", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.EntityID != nil {

		// query param entity_id
		var qrEntityID string

		if o.EntityID != nil {
			qrEntityID = *o.EntityID
		}
		qEntityID := qrEntityID
		if qEntityID != "" {

			if err := r.SetQueryParam("entity_id", qEntityID); err != nil {
				return err
			}
		}
	}

	if o.EntityType != nil {

		// query param entity_type
		var qrEntityType string

		if o.EntityType != nil {
			qrEntityType = *o.EntityType
		}
		qEntityType := qrEntityType
		if qEntityType != "" {

			if err := r.SetQueryParam("entity_type", qEntityType); err != nil {
				return err
			}
		}
	}

	if o.EventType != nil {

		// query param event_type
		var qrEventType string

		if o.EventType != nil {
			qrEventType = *o.EventType
		}
		qEventType := qrEventType
		if qEventType != "" {

			if err := r.SetQueryParam("event_type", qEventType); err != nil {
				return err
			}
		}
	}

	if o.Level != nil {

		// query param level
		var qrLevel string

		if o.Level != nil {
			qrLevel = *o.Level
		}
		qLevel := qrLevel
		if qLevel != "" {

			if err := r.SetQueryParam("level", qLevel); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.StartTime != nil {

		// query param start_time
		var qrStartTime string

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := qrStartTime
		if qStartTime != "" {

			if err := r.SetQueryParam("start_time", qStartTime); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
