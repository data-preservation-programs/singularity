// Code generated by go-swagger; DO NOT EDIT.

package preparation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// ExplorePreparationReader is a Reader for the ExplorePreparation structure.
type ExplorePreparationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExplorePreparationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExplorePreparationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExplorePreparationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExplorePreparationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /preparation/{id}/source/{name}/explore/{path}] ExplorePreparation", response, response.Code())
	}
}

// NewExplorePreparationOK creates a ExplorePreparationOK with default headers values
func NewExplorePreparationOK() *ExplorePreparationOK {
	return &ExplorePreparationOK{}
}

/*
ExplorePreparationOK describes a response with status code 200, with default header values.

OK
*/
type ExplorePreparationOK struct {
	Payload *models.DataprepExploreResult
}

// IsSuccess returns true when this explore preparation o k response has a 2xx status code
func (o *ExplorePreparationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this explore preparation o k response has a 3xx status code
func (o *ExplorePreparationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this explore preparation o k response has a 4xx status code
func (o *ExplorePreparationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this explore preparation o k response has a 5xx status code
func (o *ExplorePreparationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this explore preparation o k response a status code equal to that given
func (o *ExplorePreparationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the explore preparation o k response
func (o *ExplorePreparationOK) Code() int {
	return 200
}

func (o *ExplorePreparationOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /preparation/{id}/source/{name}/explore/{path}][%d] explorePreparationOK %s", 200, payload)
}

func (o *ExplorePreparationOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /preparation/{id}/source/{name}/explore/{path}][%d] explorePreparationOK %s", 200, payload)
}

func (o *ExplorePreparationOK) GetPayload() *models.DataprepExploreResult {
	return o.Payload
}

func (o *ExplorePreparationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DataprepExploreResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExplorePreparationBadRequest creates a ExplorePreparationBadRequest with default headers values
func NewExplorePreparationBadRequest() *ExplorePreparationBadRequest {
	return &ExplorePreparationBadRequest{}
}

/*
ExplorePreparationBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExplorePreparationBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this explore preparation bad request response has a 2xx status code
func (o *ExplorePreparationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this explore preparation bad request response has a 3xx status code
func (o *ExplorePreparationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this explore preparation bad request response has a 4xx status code
func (o *ExplorePreparationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this explore preparation bad request response has a 5xx status code
func (o *ExplorePreparationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this explore preparation bad request response a status code equal to that given
func (o *ExplorePreparationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the explore preparation bad request response
func (o *ExplorePreparationBadRequest) Code() int {
	return 400
}

func (o *ExplorePreparationBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /preparation/{id}/source/{name}/explore/{path}][%d] explorePreparationBadRequest %s", 400, payload)
}

func (o *ExplorePreparationBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /preparation/{id}/source/{name}/explore/{path}][%d] explorePreparationBadRequest %s", 400, payload)
}

func (o *ExplorePreparationBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *ExplorePreparationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExplorePreparationInternalServerError creates a ExplorePreparationInternalServerError with default headers values
func NewExplorePreparationInternalServerError() *ExplorePreparationInternalServerError {
	return &ExplorePreparationInternalServerError{}
}

/*
ExplorePreparationInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ExplorePreparationInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this explore preparation internal server error response has a 2xx status code
func (o *ExplorePreparationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this explore preparation internal server error response has a 3xx status code
func (o *ExplorePreparationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this explore preparation internal server error response has a 4xx status code
func (o *ExplorePreparationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this explore preparation internal server error response has a 5xx status code
func (o *ExplorePreparationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this explore preparation internal server error response a status code equal to that given
func (o *ExplorePreparationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the explore preparation internal server error response
func (o *ExplorePreparationInternalServerError) Code() int {
	return 500
}

func (o *ExplorePreparationInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /preparation/{id}/source/{name}/explore/{path}][%d] explorePreparationInternalServerError %s", 500, payload)
}

func (o *ExplorePreparationInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /preparation/{id}/source/{name}/explore/{path}][%d] explorePreparationInternalServerError %s", 500, payload)
}

func (o *ExplorePreparationInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *ExplorePreparationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
