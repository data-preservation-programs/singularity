// Code generated by go-swagger; DO NOT EDIT.

package deal_template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new deal template API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new deal template API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new deal template API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for deal template API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDealTemplate(params *CreateDealTemplateParams, opts ...ClientOption) (*CreateDealTemplateOK, error)

	DeleteDealTemplate(params *DeleteDealTemplateParams, opts ...ClientOption) (*DeleteDealTemplateNoContent, error)

	GetDealTemplate(params *GetDealTemplateParams, opts ...ClientOption) (*GetDealTemplateOK, error)

	ListDealTemplates(params *ListDealTemplatesParams, opts ...ClientOption) (*ListDealTemplatesOK, error)

	UpdateDealTemplate(params *UpdateDealTemplateParams, opts ...ClientOption) (*UpdateDealTemplateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateDealTemplate creates a new deal template

Create a new deal template with specified configuration
*/
func (a *Client) CreateDealTemplate(params *CreateDealTemplateParams, opts ...ClientOption) (*CreateDealTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDealTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDealTemplate",
		Method:             "POST",
		PathPattern:        "/deal-schedule-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDealTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDealTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateDealTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteDealTemplate deletes a deal template

Delete a deal template by ID or name
*/
func (a *Client) DeleteDealTemplate(params *DeleteDealTemplateParams, opts ...ClientOption) (*DeleteDealTemplateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDealTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDealTemplate",
		Method:             "DELETE",
		PathPattern:        "/deal-schedule-template/{idOrName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDealTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDealTemplateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDealTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDealTemplate gets a deal template by ID or name

Retrieve a specific deal template by its ID or name
*/
func (a *Client) GetDealTemplate(params *GetDealTemplateParams, opts ...ClientOption) (*GetDealTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDealTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDealTemplate",
		Method:             "GET",
		PathPattern:        "/deal-schedule-template/{idOrName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDealTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDealTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDealTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListDealTemplates lists all deal templates

Get a list of all deal templates
*/
func (a *Client) ListDealTemplates(params *ListDealTemplatesParams, opts ...ClientOption) (*ListDealTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDealTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListDealTemplates",
		Method:             "GET",
		PathPattern:        "/deal-schedule-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDealTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDealTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListDealTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDealTemplate updates a deal template

Update an existing deal template with partial updates (only specified fields are changed)
*/
func (a *Client) UpdateDealTemplate(params *UpdateDealTemplateParams, opts ...ClientOption) (*UpdateDealTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDealTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDealTemplate",
		Method:             "PATCH",
		PathPattern:        "/deal-schedule-template/{idOrName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDealTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDealTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateDealTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
