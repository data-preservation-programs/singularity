// Code generated by go-swagger; DO NOT EDIT.

package deal_schedule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// PauseScheduleReader is a Reader for the PauseSchedule structure.
type PauseScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PauseScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPauseScheduleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPauseScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPauseScheduleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /schedule/{id}/pause] PauseSchedule", response, response.Code())
	}
}

// NewPauseScheduleOK creates a PauseScheduleOK with default headers values
func NewPauseScheduleOK() *PauseScheduleOK {
	return &PauseScheduleOK{}
}

/*
PauseScheduleOK describes a response with status code 200, with default header values.

OK
*/
type PauseScheduleOK struct {
	Payload *models.ModelSchedule
}

// IsSuccess returns true when this pause schedule o k response has a 2xx status code
func (o *PauseScheduleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this pause schedule o k response has a 3xx status code
func (o *PauseScheduleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause schedule o k response has a 4xx status code
func (o *PauseScheduleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this pause schedule o k response has a 5xx status code
func (o *PauseScheduleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this pause schedule o k response a status code equal to that given
func (o *PauseScheduleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the pause schedule o k response
func (o *PauseScheduleOK) Code() int {
	return 200
}

func (o *PauseScheduleOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /schedule/{id}/pause][%d] pauseScheduleOK %s", 200, payload)
}

func (o *PauseScheduleOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /schedule/{id}/pause][%d] pauseScheduleOK %s", 200, payload)
}

func (o *PauseScheduleOK) GetPayload() *models.ModelSchedule {
	return o.Payload
}

func (o *PauseScheduleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelSchedule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPauseScheduleBadRequest creates a PauseScheduleBadRequest with default headers values
func NewPauseScheduleBadRequest() *PauseScheduleBadRequest {
	return &PauseScheduleBadRequest{}
}

/*
PauseScheduleBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PauseScheduleBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this pause schedule bad request response has a 2xx status code
func (o *PauseScheduleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pause schedule bad request response has a 3xx status code
func (o *PauseScheduleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause schedule bad request response has a 4xx status code
func (o *PauseScheduleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this pause schedule bad request response has a 5xx status code
func (o *PauseScheduleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this pause schedule bad request response a status code equal to that given
func (o *PauseScheduleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the pause schedule bad request response
func (o *PauseScheduleBadRequest) Code() int {
	return 400
}

func (o *PauseScheduleBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /schedule/{id}/pause][%d] pauseScheduleBadRequest %s", 400, payload)
}

func (o *PauseScheduleBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /schedule/{id}/pause][%d] pauseScheduleBadRequest %s", 400, payload)
}

func (o *PauseScheduleBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PauseScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPauseScheduleInternalServerError creates a PauseScheduleInternalServerError with default headers values
func NewPauseScheduleInternalServerError() *PauseScheduleInternalServerError {
	return &PauseScheduleInternalServerError{}
}

/*
PauseScheduleInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PauseScheduleInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this pause schedule internal server error response has a 2xx status code
func (o *PauseScheduleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pause schedule internal server error response has a 3xx status code
func (o *PauseScheduleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause schedule internal server error response has a 4xx status code
func (o *PauseScheduleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this pause schedule internal server error response has a 5xx status code
func (o *PauseScheduleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this pause schedule internal server error response a status code equal to that given
func (o *PauseScheduleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the pause schedule internal server error response
func (o *PauseScheduleInternalServerError) Code() int {
	return 500
}

func (o *PauseScheduleInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /schedule/{id}/pause][%d] pauseScheduleInternalServerError %s", 500, payload)
}

func (o *PauseScheduleInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /schedule/{id}/pause][%d] pauseScheduleInternalServerError %s", 500, payload)
}

func (o *PauseScheduleInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PauseScheduleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
